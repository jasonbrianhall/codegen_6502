// This is an automatically generated file.
// Do not edit directly.
//
#include "SMB.hpp"

void SMBEngine::loadConstantData()
{
    // VRAM_AddrTable_Low
    //
    const uint8_t VRAM_AddrTable_Low_data[] = {
        LOBYTE(WorldSelectMessage2),
        LOBYTE(WorldSelectMessage1), LOBYTE(PrincessSaved2), LOBYTE(PrincessSaved1),
        LOBYTE(MushroomRetainerSaved), LOBYTE(LuigiThanksMessage), LOBYTE(MarioThanksMessage),
        LOBYTE(MushroomPaletteData), LOBYTE(NightSnowPaletteData), LOBYTE(DaySnowPaletteData),
        LOBYTE(BowserPaletteData), LOBYTE(VRAM_Buffer2), LOBYTE(VRAM_Buffer2),
        LOBYTE(VRAM_Buffer1_Offset), LOBYTE(CastlePaletteData), LOBYTE(UndergroundPaletteData),
        LOBYTE(GroundPaletteData), LOBYTE(WaterPaletteData), LOBYTE(VRAM_Buffer1)
    };
    writeData(VRAM_AddrTable_Low, VRAM_AddrTable_Low_data, sizeof(VRAM_AddrTable_Low_data));

    // VRAM_AddrTable_High
    //
    const uint8_t VRAM_AddrTable_High_data[] = {
        HIBYTE(WorldSelectMessage2),
        HIBYTE(WorldSelectMessage1), HIBYTE(PrincessSaved2), HIBYTE(PrincessSaved1),
        HIBYTE(MushroomRetainerSaved), HIBYTE(LuigiThanksMessage), HIBYTE(MarioThanksMessage),
        HIBYTE(MushroomPaletteData), HIBYTE(NightSnowPaletteData), HIBYTE(DaySnowPaletteData),
        HIBYTE(BowserPaletteData), HIBYTE(VRAM_Buffer2), HIBYTE(VRAM_Buffer2),
        HIBYTE(VRAM_Buffer1_Offset), HIBYTE(CastlePaletteData), HIBYTE(UndergroundPaletteData),
        HIBYTE(GroundPaletteData), HIBYTE(WaterPaletteData), HIBYTE(VRAM_Buffer1)
    };
    writeData(VRAM_AddrTable_High, VRAM_AddrTable_High_data, sizeof(VRAM_AddrTable_High_data));

    // VRAM_Buffer_Offset
    //
    const uint8_t VRAM_Buffer_Offset_data[] = {
        LOBYTE(VRAM_Buffer2_Offset), LOBYTE(VRAM_Buffer1_Offset)
    };
    writeData(VRAM_Buffer_Offset, VRAM_Buffer_Offset_data, sizeof(VRAM_Buffer_Offset_data));

    // WSelectBufferTemplate
    //
    const uint8_t WSelectBufferTemplate_data[] = {
        0x00, 0x00, 0x01, 0x73, 0x20, 0x04
    };
    writeData(WSelectBufferTemplate, WSelectBufferTemplate_data, sizeof(WSelectBufferTemplate_data));

    // MushroomIconData
    //
    const uint8_t MushroomIconData_data[] = {
        0x00, 0x24, 0x24, 0xce, 0x83, 0x49, 0x22, 0x07
    };
    writeData(MushroomIconData, MushroomIconData_data, sizeof(MushroomIconData_data));

    // DemoActionData
    //
    const uint8_t DemoActionData_data[] = {
        0x00, 0x80, 0x02, 0x01, 0xc1, 0x01,
        0xc1, 0x41, 0xc1, 0x41, 0x80, 0x02, 0xc2, 0x42,
        0x01, 0x80, 0x41, 0x81, 0x02, 0x80, 0x01
    };
    writeData(DemoActionData, DemoActionData_data, sizeof(DemoActionData_data));

    // DemoTimingData
    //
    const uint8_t DemoTimingData_data[] = {
        0x00, 0xff, 0x01, 0x30, 0x30, 0x20, 0x80,
        0x10, 0x20, 0x30, 0x28, 0x20, 0x10, 0x5a, 0x15,
        0x24, 0x20, 0x2c, 0x05, 0x18, 0x10, 0x9b
    };
    writeData(DemoTimingData, DemoTimingData_data, sizeof(DemoTimingData_data));

    // FloateyNumTileData
    //
    const uint8_t FloateyNumTileData_data[] = {
        0xfe, 0xfd, //  "1-UP"
        0x50, 0xfa, //  "8000"
        0x50, 0xf9, //  "5000"
        0x50, 0xf8, //  "4000"
        0x50, 0xf7, //  "2000"
        0x50, 0xf6, //  "1000"
        0xfb, 0xfa, //  "800"
        0xfb, 0xf9, //  "500"
        0xfb, 0xf8, //  "400"
        0xfb, 0xf7, //  "200"
        0xfb, 0xf6, //  "100"
        0xff, 0xff // dummy
    };
    writeData(FloateyNumTileData, FloateyNumTileData_data, sizeof(FloateyNumTileData_data));

    // ScoreUpdateData
    //
    const uint8_t ScoreUpdateData_data[] = {
        0x00, 0x38, 0x35, 0x34, 0x32, 0x31,
        0x48, 0x45, 0x44, 0x42, 0x41,
        0xff // dummy
    };
    writeData(ScoreUpdateData, ScoreUpdateData_data, sizeof(ScoreUpdateData_data));

    // AreaPalette
    //
    const uint8_t AreaPalette_data[] = {
        0x04, 0x03, 0x02, 0x01
    };
    writeData(AreaPalette, AreaPalette_data, sizeof(AreaPalette_data));

    // BGColorCtrl_Addr
    //
    const uint8_t BGColorCtrl_Addr_data[] = {
        0x04, 0x0a, 0x09, 0x00
    };
    writeData(BGColorCtrl_Addr, BGColorCtrl_Addr_data, sizeof(BGColorCtrl_Addr_data));

    // BackgroundColors
    //
    const uint8_t BackgroundColors_data[] = {
        0x0f, 0x0f, 0x22, 0x0f, // used by background color control if set
        0x0f, 0x0f, 0x22, 0x22 // used by area type if bg color ctrl not set
    };
    writeData(BackgroundColors, BackgroundColors_data, sizeof(BackgroundColors_data));

    // PlayerColors
    //
    const uint8_t PlayerColors_data[] = {
        0x16, 0x27, 0x37, 0x22, // fiery (used by both)
        0x19, 0x27, 0x30, 0x22, // luigi's colors
        0x18, 0x27, 0x16, 0x22 // mario's colors
    };
    writeData(PlayerColors, PlayerColors_data, sizeof(PlayerColors_data));

    // TopStatusBarLine
    //
    const uint8_t TopStatusBarLine_data[] = {
        0xff, //  end of data block
        0xea, 0x01, 0xc2, 0x23, //  attribute table data, used for coin icon in status bar
        0xaa, 0x7f, 0xc0, 0x23, //  attribute table data, clears name table 0 to palette 2
        0x29, 0x2e, 0x24, 0x24, 0x00, 0x05, 0x68, 0x20, //  score trailing digit and coin display
        0x0e, 0x16, 0x12, 0x1d, 0x24, 0x24,
        0x0d, 0x15, 0x1b, 0x18, 0x20, 0x0b, 0x52, 0x20, //  "WORLD  TIME"
        0x18, 0x12, 0x1b, 0x0a, 0x16, 0x05, 0x43, 0x20 //  "MARIO"
    };
    writeData(TopStatusBarLine, TopStatusBarLine_data, sizeof(TopStatusBarLine_data));

    // WorldLivesDisplay
    //
    const uint8_t WorldLivesDisplay_data[] = {
        0xff,
        0xba, 0x01, 0xdc, 0x23, //  attribute table data for crown if more than 9 lives
        0x24, 0x47, 0x0c, 0x22, //  possibly used to clear time up
        0x24, 0x28, 0x24, 0x24, 0x0d, 0x15, 0x1b,
        0x18, 0x20, 0x09, 0x4b, 0x21, //  "WORLD  - " used on lives display
        0x24, 0x24, 0x24, 0x24, 0x29, //  lives display
        0x24, 0x24, 0x07, 0xcd, 0x21 //  cross with spaces used on
    };
    writeData(WorldLivesDisplay, WorldLivesDisplay_data, sizeof(WorldLivesDisplay_data));

    // TwoPlayerTimeUp
    //
    const uint8_t TwoPlayerTimeUp_data[] = {
        0x18, 0x12, 0x1b, 0x0a, 0x16, 0x05, 0xcd, 0x21 //  "MARIO"
    };
    writeData(TwoPlayerTimeUp, TwoPlayerTimeUp_data, sizeof(TwoPlayerTimeUp_data));

    // OnePlayerTimeUp
    //
    const uint8_t OnePlayerTimeUp_data[] = {
        0xff,
        0x19, 0x1e, 0x24, 0x0e, 0x16, 0x12, 0x1d, 0x07, 0x0c, 0x22 //  "TIME UP"
    };
    writeData(OnePlayerTimeUp, OnePlayerTimeUp_data, sizeof(OnePlayerTimeUp_data));

    // TwoPlayerGameOver
    //
    const uint8_t TwoPlayerGameOver_data[] = {
        0x18, 0x12, 0x1b, 0x0a, 0x16, 0x05, 0xcd, 0x21 //  "MARIO"
    };
    writeData(TwoPlayerGameOver, TwoPlayerGameOver_data, sizeof(TwoPlayerGameOver_data));

    // OnePlayerGameOver
    //
    const uint8_t OnePlayerGameOver_data[] = {
        0xff,
        0x1b, 0x0e, 0x1f, 0x18,
        0x24, 0x0e, 0x16, 0x0a, 0x10, 0x09, 0x0b, 0x22 //  "GAME OVER"
    };
    writeData(OnePlayerGameOver, OnePlayerGameOver_data, sizeof(OnePlayerGameOver_data));

    // WarpZoneWelcome
    //
    const uint8_t WarpZoneWelcome_data[] = {
        0xff,
        0xaa, 0x45, 0xe1, 0x27,
        0xaa, 0x46, 0xd9, 0x27, //  attribute data
        0x24, 0x01, 0x35, 0x26, //  placeholder for right pipe
        0x24, 0x01, 0x2d, 0x26, //  placeholder for middle pipe
        0x24, 0x01, 0x25, 0x26, //  placeholder for left pipe
        0x2b, 0x0e, 0x17, 0x18, 0x23, 0x24,
        0x19, 0x1b, 0x0a, 0x20, 0x24, 0x18, 0x1d, 0x24, 0x0e,
        0x16, 0x18, 0x0c, 0x15, 0x0e, 0x20, 0x15, 0x84, 0x25 //  "WELCOME TO WARP ZONE!"
    };
    writeData(WarpZoneWelcome, WarpZoneWelcome_data, sizeof(WarpZoneWelcome_data));

    // LuigiName
    //
    const uint8_t LuigiName_data[] = {
        0x12, 0x10, 0x12, 0x1e, 0x15 //  "LUIGI", no address or length
    };
    writeData(LuigiName, LuigiName_data, sizeof(LuigiName_data));

    // WarpZoneNumbers
    //
    const uint8_t WarpZoneNumbers_data[] = {
        0x00, 0x06, 0x07, 0x08, //  the minus world
        0x00, 0x24, 0x05, 0x24, //  zone, partly responsible for
        0x00, 0x02, 0x03, 0x04 //  warp zone numbers, note spaces on middle
    };
    writeData(WarpZoneNumbers, WarpZoneNumbers_data, sizeof(WarpZoneNumbers_data));

    // GameTextOffsets
    //
    const uint8_t GameTextOffsets_data[] = {
        WarpZoneWelcome - GameText, WarpZoneWelcome - GameText,
        OnePlayerGameOver - GameText, TwoPlayerGameOver - GameText,
        OnePlayerTimeUp - GameText, TwoPlayerTimeUp - GameText,
        WorldLivesDisplay - GameText, WorldLivesDisplay - GameText,
        TopStatusBarLine - GameText, TopStatusBarLine - GameText
    };
    writeData(GameTextOffsets, GameTextOffsets_data, sizeof(GameTextOffsets_data));

    // ColorRotatePalette
    //
    const uint8_t ColorRotatePalette_data[] = {
        0x17, 0x07, 0x17, 0x27, 0x27, 0x27
    };
    writeData(ColorRotatePalette, ColorRotatePalette_data, sizeof(ColorRotatePalette_data));

    // BlankPalette
    //
    const uint8_t BlankPalette_data[] = {
        0x00, 0xff, 0xff, 0xff, 0xff, 0x04, 0x0c, 0x3f
    };
    writeData(BlankPalette, BlankPalette_data, sizeof(BlankPalette_data));

    // Palette3Data
    //
    const uint8_t Palette3Data_data[] = {
        0x00, 0x17, 0x07, 0x0f,
        0x1c, 0x17, 0x07, 0x0f,
        0x0f, 0x17, 0x07, 0x0f,
        0x0f, 0x12, 0x07, 0x0f
    };
    writeData(Palette3Data, Palette3Data_data, sizeof(Palette3Data_data));

    // BlockGfxData
    //
    const uint8_t BlockGfxData_data[] = {
        0x26, 0x26, 0x26, 0x26,
        0x24, 0x24, 0x24, 0x24,
        0x5a, 0x59, 0x58, 0x57,
        0x47, 0x47, 0x47, 0x47,
        0x47, 0x47, 0x45, 0x45
    };
    writeData(BlockGfxData, BlockGfxData_data, sizeof(BlockGfxData_data));

    // MetatileGraphics_Low
    //
    const uint8_t MetatileGraphics_Low_data[] = {
        LOBYTE(Palette3_MTiles), LOBYTE(Palette2_MTiles), LOBYTE(Palette1_MTiles), LOBYTE(Palette0_MTiles)
    };
    writeData(MetatileGraphics_Low, MetatileGraphics_Low_data, sizeof(MetatileGraphics_Low_data));

    // MetatileGraphics_High
    //
    const uint8_t MetatileGraphics_High_data[] = {
        HIBYTE(Palette3_MTiles), HIBYTE(Palette2_MTiles), HIBYTE(Palette1_MTiles), HIBYTE(Palette0_MTiles)
    };
    writeData(MetatileGraphics_High, MetatileGraphics_High_data, sizeof(MetatileGraphics_High_data));

    // Palette0_MTiles
    //
    const uint8_t Palette0_MTiles_data[] = {
        0x24, 0x24, 0x24, 0x24, // blank, used in conjunction with vines
        0xa3, 0xa3, 0xa2, 0xa2, // flagpole shaft
        0x3d, 0x24, 0x2f, 0x24, // flagpole ball
        0x24, 0x24, 0x24, 0x24, // blank, used on bricks or blocks that are hit
        0xeb, 0xea, 0xe9, 0xa4, // seaplant
        0x69, 0x69, 0x94, 0x90, // sideways pipe joint bottom
        0x93, 0x26, 0x93, 0x26, // sideways pipe shaft bottom
        0x92, 0x8f, 0x91, 0x8e, // sideways pipe end bottom
        0x69, 0x69, 0x8d, 0x89, // sideways pipe joint top
        0x8c, 0x88, 0x8c, 0x88, // sideways pipe shaft top
        0x8b, 0x87, 0x8a, 0x86, // sideways pipe end top
        0x74, 0x6f, 0x73, 0x6e, // mushroom right edge
        0x72, 0x6d, 0x71, 0x6c, // mushroom middle
        0x2d, 0x2c, 0x70, 0x6b, // mushroom left edge
        0x51, 0x50, 0x4e, 0x4d, // tree ledge right edge
        0x4f, 0x4d, 0x4f, 0x4d, // tree ledge middle
        0x4e, 0x4d, 0x4c, 0x4b, // tree ledge left edge
        0x6a, 0x6a, 0x26, 0x26, // pipe shaft right
        0x69, 0x69, 0x68, 0x68, // pipe shaft left
        0x67, 0x63, 0x66, 0x62, // decoration pipe end right, points up
        0x65, 0x61, 0x64, 0x60, // decoration pipe end left, points up
        0x67, 0x63, 0x66, 0x62, // warp pipe end right, points up
        0x65, 0x61, 0x64, 0x60, // warp pipe end left, points up
        0xbd, 0xbb, 0xbc, 0xba, // tall tree top, bottom half
        0xbd, 0xb9, 0xbc, 0xb8, // short tree top
        0xbb, 0xb9, 0xba, 0xb8, // tall tree top, top half
        0x24, 0x7f, 0x7f, 0x24, // chain
        0xc0, 0x24, 0xc0, 0x24, // bridge guardrail
        0x26, 0x26, 0x26, 0x26, // mountain middle bottom
        0x26, 0x26, 0x26, 0x34, // mountain right bottom
        0x33, 0x24, 0x26, 0x33, // mountain right
        0x32, 0x24, 0x31, 0x24, // mountain middle top
        0x26, 0x34, 0x26, 0x26, // mountain left bottom/middle center
        0x26, 0x30, 0x30, 0x24, // mountain left
        0x24, 0x24, 0x38, 0x24, // bush right
        0x25, 0x37, 0x25, 0x36, // bush middle
        0x35, 0x24, 0x24, 0x24, // bush left
        0x27, 0x27, 0x27, 0x27, // black metatile
        0x24, 0x24, 0x24, 0x24 // blank
    };
    writeData(Palette0_MTiles, Palette0_MTiles_data, sizeof(Palette0_MTiles_data));

    // Palette1_MTiles
    //
    const uint8_t Palette1_MTiles_data[] = {
        0x3d, 0x24, 0x2f, 0x24, // flag ball (residual object)
        0x92, 0x8f, 0x91, 0x8e, // water pipe bottom
        0x8b, 0x87, 0x8a, 0x86, // water pipe top
        0x47, 0x24, 0x47, 0x24, // half brick (???)
        0x85, 0x84, 0x83, 0x82, // solid block (water level, green rock)
        0x47, 0x24, 0x47, 0x24, // half brick used for jumpspring
        0x24, 0x24, 0x24, 0x24, // blank used for jumpspring
        0x40, 0x40, 0x2a, 0x2a, // bullet bill cannon bottom
        0xcd, 0xcb, 0xcc, 0xca, // bullet bill cannon top
        0xc9, 0xc7, 0xc8, 0xc6, // bullet bill cannon barrel
        0x24, 0xc1, 0x24, 0xc1, // bridge
        0x5e, 0x5d, 0x5e, 0x5d, // solid block (white wall)
        0xae, 0xad, 0xac, 0xab, // solid block (3-d block)
        0x24, 0x24, 0x24, 0x24, // hidden block (1-up)
        0x24, 0x24, 0x24, 0x24, // hidden block (1 coin)
        0x47, 0x47, 0x47, 0x47, // brick (1-up)
        0x47, 0x47, 0x47, 0x47, // brick (coins)
        0x47, 0x47, 0x47, 0x47, // brick (star)
        0x47, 0x47, 0x47, 0x47, // brick (vine)
        0x47, 0x47, 0x47, 0x47, // brick (power-up)
        0x47, 0x45, 0x47, 0x45, // brick with line (1-up)
        0x47, 0x45, 0x47, 0x45, // brick with line (coins)
        0x47, 0x45, 0x47, 0x45, // brick with line (star)
        0x47, 0x45, 0x47, 0x45, // brick with line (vine)
        0x47, 0x45, 0x47, 0x45, // brick with line (power-up)
        0xb7, 0xb5, 0xb6, 0xb4, // cracked rock terrain
        0x47, 0x45, 0x47, 0x45, // breakable brick (not used)
        0x47, 0x47, 0x47, 0x47, // breakable brick 
        0x47, 0x45, 0x47, 0x45, // breakable brick w/ line 
        0xbb, 0xbb, 0xba, 0xba, // mushroom stump bottom
        0xbb, 0x76, 0xba, 0x75, // mushroom stump top
        0xbf, 0xbf, 0xbe, 0xbe, // tree trunk
        0xa1, 0x81, 0xa0, 0x80, // fence
        0x52, 0x52, 0x52, 0x52, // green ledge stump
        0x27, 0x27, 0x27, 0x27, // entrance bottom
        0x27, 0x9c, 0x27, 0x9b, // entrance top
        0x47, 0xaa, 0x47, 0xa9, // castle top w/ brick
        0x47, 0x47, 0x27, 0x27, // castle window right
        0x47, 0x47, 0x47, 0x47, // castle brick wall
        0x27, 0x27, 0x47, 0x47, // castle window left
        0x47, 0x9e, 0x47, 0x9d, // castle top
        0x24, 0x24, 0x24, 0x24, // blank used for balance rope
        0xa3, 0x24, 0x5c, 0x5b, // right pulley
        0x3f, 0x3e, 0xa2, 0x24, // left pulley
        0x24, 0x99, 0x24, 0x99, // horizontal rope
        0xa3, 0xa3, 0xa2, 0xa2 // vertical rope
    };
    writeData(Palette1_MTiles, Palette1_MTiles_data, sizeof(Palette1_MTiles_data));

    // Palette2_MTiles
    //
    const uint8_t Palette2_MTiles_data[] = {
        0x79, 0x77, 0x79, 0x77, // bowser's bridge
        0xb3, 0xb2, 0xb1, 0xb0, // cloud level terrain
        0x26, 0x26, 0x26, 0x26, // water/lava
        0x26, 0x41, 0x26, 0x41, // water/lava top
        0x24, 0x24, 0x24, 0x3c, // cloud bottom right
        0x24, 0x3b, 0x24, 0x3a, // cloud bottom middle
        0x24, 0x39, 0x24, 0x24, // cloud bottom left
        0x24, 0x24, 0x38, 0x24, // cloud right
        0x25, 0x37, 0x25, 0x36, // cloud middle
        0x35, 0x24, 0x24, 0x24 // cloud left
    };
    writeData(Palette2_MTiles, Palette2_MTiles_data, sizeof(Palette2_MTiles_data));

    // Palette3_MTiles
    //
    const uint8_t Palette3_MTiles_data[] = {
        0x7e, 0x7c, 0x7d, 0x7b, // axe
        0x5a, 0x58, 0x59, 0x57, // empty block
        0xc5, 0xc3, 0xc4, 0xc2, // underwater coin
        0xa8, 0xa6, 0xa7, 0xa5, // coin
        0x56, 0x54, 0x55, 0x53, // question block (power-up)
        0x56, 0x54, 0x55, 0x53 // question block (coin)
    };
    writeData(Palette3_MTiles, Palette3_MTiles_data, sizeof(Palette3_MTiles_data));

    // WaterPaletteData
    //
    const uint8_t WaterPaletteData_data[] = {
        0x00,
        0x10, 0x30, 0x0f, 0x0f,
        0x27, 0x30, 0x16, 0x0f,
        0x27, 0x30, 0x10, 0x0f,
        0x18, 0x27, 0x16, 0x22,
        0x0f, 0x12, 0x27, 0x0f,
        0x0f, 0x12, 0x30, 0x0f,
        0x0f, 0x1a, 0x3a, 0x0f,
        0x25, 0x12, 0x15, 0x0f,
        0x20, 0x00, 0x3f
    };
    writeData(WaterPaletteData, WaterPaletteData_data, sizeof(WaterPaletteData_data));

    // GroundPaletteData
    //
    const uint8_t GroundPaletteData_data[] = {
        0x00,
        0x17, 0x36, 0x0f, 0x0f,
        0x27, 0x30, 0x16, 0x0f,
        0x27, 0x30, 0x1a, 0x0f,
        0x18, 0x27, 0x16, 0x0f,
        0x0f, 0x17, 0x27, 0x0f,
        0x0f, 0x21, 0x30, 0x0f,
        0x0f, 0x17, 0x36, 0x0f,
        0x0f, 0x1a, 0x29, 0x0f,
        0x20, 0x00, 0x3f
    };
    writeData(GroundPaletteData, GroundPaletteData_data, sizeof(GroundPaletteData_data));

    // UndergroundPaletteData
    //
    const uint8_t UndergroundPaletteData_data[] = {
        0x00,
        0x1c, 0x3c, 0x0c, 0x0f,
        0x27, 0x30, 0x16, 0x0f,
        0x17, 0x36, 0x1c, 0x0f,
        0x18, 0x27, 0x16, 0x0f,
        0x1c, 0x17, 0x27, 0x0f,
        0x1c, 0x21, 0x30, 0x0f,
        0x0f, 0x1c, 0x3c, 0x0f,
        0x09, 0x1a, 0x29, 0x0f,
        0x20, 0x00, 0x3f
    };
    writeData(UndergroundPaletteData, UndergroundPaletteData_data, sizeof(UndergroundPaletteData_data));

    // CastlePaletteData
    //
    const uint8_t CastlePaletteData_data[] = {
        0x00,
        0x10, 0x30, 0x00, 0x0f,
        0x27, 0x30, 0x16, 0x0f,
        0x17, 0x36, 0x1c, 0x0f,
        0x18, 0x27, 0x16, 0x0f,
        0x00, 0x17, 0x27, 0x0f,
        0x00, 0x16, 0x30, 0x0f,
        0x00, 0x10, 0x30, 0x0f,
        0x00, 0x10, 0x30, 0x0f,
        0x20, 0x00, 0x3f
    };
    writeData(CastlePaletteData, CastlePaletteData_data, sizeof(CastlePaletteData_data));

    // DaySnowPaletteData
    //
    const uint8_t DaySnowPaletteData_data[] = {
        0x00,
        0x10, 0x00, 0x30, 0x22,
        0x04, 0x00, 0x3f
    };
    writeData(DaySnowPaletteData, DaySnowPaletteData_data, sizeof(DaySnowPaletteData_data));

    // NightSnowPaletteData
    //
    const uint8_t NightSnowPaletteData_data[] = {
        0x00,
        0x10, 0x00, 0x30, 0x0f,
        0x04, 0x00, 0x3f
    };
    writeData(NightSnowPaletteData, NightSnowPaletteData_data, sizeof(NightSnowPaletteData_data));

    // MushroomPaletteData
    //
    const uint8_t MushroomPaletteData_data[] = {
        0x00,
        0x0f, 0x16, 0x27, 0x22,
        0x04, 0x00, 0x3f
    };
    writeData(MushroomPaletteData, MushroomPaletteData_data, sizeof(MushroomPaletteData_data));

    // BowserPaletteData
    //
    const uint8_t BowserPaletteData_data[] = {
        0x00,
        0x27, 0x30, 0x1a, 0x0f,
        0x04, 0x14, 0x3f
    };
    writeData(BowserPaletteData, BowserPaletteData_data, sizeof(BowserPaletteData_data));

    // MarioThanksMessage
    //
    const uint8_t MarioThanksMessage_data[] = {
        0x00,
        0x2b, 0x18, 0x12, 0x1b, 0x0a, 0x16,
        0x24, 0x1e, 0x18, 0x22,
        0x24, 0x14, 0x17, 0x0a, 0x11, 0x1d,
        0x10, 0x48, 0x25
    };
    writeData(MarioThanksMessage, MarioThanksMessage_data, sizeof(MarioThanksMessage_data));

    // LuigiThanksMessage
    //
    const uint8_t LuigiThanksMessage_data[] = {
        0x00,
        0x2b, 0x12, 0x10, 0x12, 0x1e, 0x15,
        0x24, 0x1e, 0x18, 0x22,
        0x24, 0x14, 0x17, 0x0a, 0x11, 0x1d,
        0x10, 0x48, 0x25
    };
    writeData(LuigiThanksMessage, LuigiThanksMessage_data, sizeof(LuigiThanksMessage_data));

    // MushroomRetainerSaved
    //
    const uint8_t MushroomRetainerSaved_data[] = {
        0x00, 0x2b, 0x0e, 0x15, 0x1d, 0x1c, 0x0a, 0x0c,
        0x24, 0x1b, 0x0e, 0x11, 0x1d, 0x18, 0x17, 0x0a,
        0x0f, 0x05, 0x26,
        0x17, 0x12, 0x24, 0x1c, 0x12,
        0x24, 0x1c, 0x1c, 0x0e, 0x0c, 0x17, 0x12, 0x1b, 0x19,
        0x24, 0x1b, 0x1e, 0x18, 0x24, 0x1d, 0x1e, 0x0b,
        0x16, 0xc5, 0x25
    };
    writeData(MushroomRetainerSaved, MushroomRetainerSaved_data, sizeof(MushroomRetainerSaved_data));

    // PrincessSaved1
    //
    const uint8_t PrincessSaved1_data[] = {
        0x00,
        0xaf, 0x1b, 0x0e, 0x1f, 0x18, 0x24, 0x1c, 0x12,
        0x24, 0x1d, 0x1c, 0x0e, 0x1e, 0x1a,
        0x24, 0x1b, 0x1e, 0x18, 0x22,
        0x13, 0xa7, 0x25
    };
    writeData(PrincessSaved1, PrincessSaved1_data, sizeof(PrincessSaved1_data));

    // PrincessSaved2
    //
    const uint8_t PrincessSaved2_data[] = {
        0x00,
        0xaf, 0x1d, 0x1c, 0x0e, 0x1e, 0x1a,
        0x24, 0x20, 0x0e, 0x17, 0x24, 0x0a, 0x24, 0x1e, 0x18, 0x22,
        0x24, 0x1d, 0x17, 0x0e, 0x1c, 0x0e, 0x1b, 0x19,
        0x24, 0x0e, 0x20,
        0x1b, 0xe3, 0x25
    };
    writeData(PrincessSaved2, PrincessSaved2_data, sizeof(PrincessSaved2_data));

    // WorldSelectMessage1
    //
    const uint8_t WorldSelectMessage1_data[] = {
        0x00,
        0x0b, 0x24, 0x17, 0x18, 0x1d, 0x1d, 0x1e, 0x0b,
        0x24, 0x11, 0x1c, 0x1e, 0x19,
        0x0d, 0x4a, 0x26
    };
    writeData(WorldSelectMessage1, WorldSelectMessage1_data, sizeof(WorldSelectMessage1_data));

    // WorldSelectMessage2
    //
    const uint8_t WorldSelectMessage2_data[] = {
        0x00,
        0x0d, 0x15, 0x1b, 0x18, 0x20, 0x24, 0x0a,
        0x24, 0x1d, 0x0c, 0x0e, 0x15, 0x0e, 0x1c, 0x24, 0x18, 0x1d,
        0x11, 0x88, 0x26
    };
    writeData(WorldSelectMessage2, WorldSelectMessage2_data, sizeof(WorldSelectMessage2_data));

    // StatusBarData
    //
    const uint8_t StatusBarData_data[] = {
        0x03, 0x7a, //  game timer
        0x02, 0x6d,
        0x02, 0x6d, //  coin tally
        0x06, 0x62,
        0x06, 0x62, //  player score
        0x06, 0xf0 //  top score display on title screen
    };
    writeData(StatusBarData, StatusBarData_data, sizeof(StatusBarData_data));

    // StatusBarOffset
    //
    const uint8_t StatusBarOffset_data[] = {
        0x24, 0x1e, 0x18, 0x12, 0x0c, 0x06
    };
    writeData(StatusBarOffset, StatusBarOffset_data, sizeof(StatusBarOffset_data));

    // DefaultSprOffsets
    //
    const uint8_t DefaultSprOffsets_data[] = {
        0x2c, 0x28, 0xfc, 0xf8, 0x24, 0xe8, 0xd8,
        0xc0, 0xa8, 0x90, 0x78, 0x60, 0x48, 0x30, 0x04
    };
    writeData(DefaultSprOffsets, DefaultSprOffsets_data, sizeof(DefaultSprOffsets_data));

    // Sprite0Data
    //
    const uint8_t Sprite0Data_data[] = {
        0x58, 0x23, 0xff, 0x18
    };
    writeData(Sprite0Data, Sprite0Data_data, sizeof(Sprite0Data_data));

    // MusicSelectData
    //
    const uint8_t MusicSelectData_data[] = {
        PipeIntroMusic, CloudMusic,
        CastleMusic, UndergroundMusic, GroundMusic, WaterMusic
    };
    writeData(MusicSelectData, MusicSelectData_data, sizeof(MusicSelectData_data));

    // PlayerStarting_X_Pos
    //
    const uint8_t PlayerStarting_X_Pos_data[] = {
        0x28, 0x38,
        0x18, 0x28
    };
    writeData(PlayerStarting_X_Pos, PlayerStarting_X_Pos_data, sizeof(PlayerStarting_X_Pos_data));

    // AltYPosOffset
    //
    const uint8_t AltYPosOffset_data[] = {
        0x00, 0x08
    };
    writeData(AltYPosOffset, AltYPosOffset_data, sizeof(AltYPosOffset_data));

    // PlayerStarting_Y_Pos
    //
    const uint8_t PlayerStarting_Y_Pos_data[] = {
        0xf0,
        0xb0, 0xb0, 0x00, 0x00, 0x50, 0xb0, 0x20, 0x00
    };
    writeData(PlayerStarting_Y_Pos, PlayerStarting_Y_Pos_data, sizeof(PlayerStarting_Y_Pos_data));

    // PlayerBGPriorityData
    //
    const uint8_t PlayerBGPriorityData_data[] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00
    };
    writeData(PlayerBGPriorityData, PlayerBGPriorityData_data, sizeof(PlayerBGPriorityData_data));

    // GameTimerData
    //
    const uint8_t GameTimerData_data[] = {
        0x02, 0x03, 0x04,
        0x20 // dummy byte, used as part of bg priority data
    };
    writeData(GameTimerData, GameTimerData_data, sizeof(GameTimerData_data));

    // HalfwayPageNybbles
    //
    const uint8_t HalfwayPageNybbles_data[] = {
        0x00, 0x00,
        0x70, 0x65,
        0x60, 0x66,
        0x40, 0x66,
        0x40, 0x66,
        0x40, 0x66,
        0x70, 0x65,
        0x40, 0x56
    };
    writeData(HalfwayPageNybbles, HalfwayPageNybbles_data, sizeof(HalfwayPageNybbles_data));

    // BSceneDataOffsets
    //
    const uint8_t BSceneDataOffsets_data[] = {
        0x60, 0x30, 0x00
    };
    writeData(BSceneDataOffsets, BSceneDataOffsets_data, sizeof(BSceneDataOffsets_data));

    // BackSceneryData
    //
    const uint8_t BackSceneryData_data[] = {
        0x03, 0x02, 0x01, 0x00, 0x8b, 0x00, 0xaa, 0x9c,
        0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x13, 0x12,
        0x12, 0x11, 0x03, 0x02, 0x01, 0x00, 0x00, 0x9c,
        0x9c, 0x00, 0x8b, 0x13, 0x12, 0x11, 0xaa, 0xaa,
        0xaa, 0xaa, 0x8b, 0x00, 0x9c, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x13, 0x12, 0x12, 0x11, // trees and fences
        0x00, 0x00, 0x00, 0xa6, 0xa5, 0xa5, 0xa4, 0x00,
        0x03, 0x02, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x13, 0x12, 0x12, 0x12, 0x11, 0x00, 0xa6, 0xa5,
        0xa4, 0x00, 0x03, 0x02, 0x01, 0x99, 0x98, 0x97,
        0xa6, 0xa5, 0xa5, 0xa5, 0xa4, 0x13, 0x12, 0x11,
        0x00, 0x00, 0x00, 0x99, 0x89, 0x88, 0x87, 0x97, // mountains and bushes
        0x92, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43,
        0x42, 0x41, 0x53, 0x52, 0x51, 0x00, 0x00, 0x00,
        0x00, 0x93, 0x92, 0x91, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x03, 0x02, 0x02, 0x01, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x53, 0x52, 0x51, 0x00,
        0x00, 0x13, 0x12, 0x12, 0x11, 0x00, 0x00, 0x93 // clouds
    };
    writeData(BackSceneryData, BackSceneryData_data, sizeof(BackSceneryData_data));

    // BackSceneryMetatiles
    //
    const uint8_t BackSceneryMetatiles_data[] = {
        0x4e, 0x4e, 0x0e, // short tree
        0x4e, 0x0f, 0x0d, // tall tree
        0x00, 0x00, 0x4d, // fence
        0x09, 0x08, 0x00, // mountain right
        0x0a, 0x06, 0x07, // mountain middle
        0x06, 0x05, 0x00, // mountain left
        0x00, 0x00, 0x04, // bush right
        0x00, 0x00, 0x03, // bush middle
        0x00, 0x00, 0x02, // bush left
        0x00, 0x85, 0x82, // cloud right
        0x00, 0x84, 0x81, // cloud middle
        0x00, 0x83, 0x80 // cloud left
    };
    writeData(BackSceneryMetatiles, BackSceneryMetatiles_data, sizeof(BackSceneryMetatiles_data));

    // FSceneDataOffsets
    //
    const uint8_t FSceneDataOffsets_data[] = {
        0x1a, 0x0d, 0x00
    };
    writeData(FSceneDataOffsets, FSceneDataOffsets_data, sizeof(FSceneDataOffsets_data));

    // ForeSceneryData
    //
    const uint8_t ForeSceneryData_data[] = {
        0x87, 0x86, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // over water
        0x00, 0x00, 0x47, 0x47, 0x47, 0x47,
        0x47, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, // wall
        0x69, 0x69, 0x87, 0x87, 0x87, 0x87,
        0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x86 // in water
    };
    writeData(ForeSceneryData, ForeSceneryData_data, sizeof(ForeSceneryData_data));

    // TerrainMetatiles
    //
    const uint8_t TerrainMetatiles_data[] = {
        0x62, 0x52, 0x54, 0x69
    };
    writeData(TerrainMetatiles, TerrainMetatiles_data, sizeof(TerrainMetatiles_data));

    // TerrainRenderBits
    //
    const uint8_t TerrainRenderBits_data[] = {
        BOOST_BINARY(00011111), BOOST_BINARY(11111111), // completely solid top to bottom
        BOOST_BINARY(00011000), BOOST_BINARY(11110001), // ceiling 1, middle 4, floor 2
        BOOST_BINARY(00011000), BOOST_BINARY(11111001), // ceiling 1, middle 5, floor 2
        BOOST_BINARY(00011111), BOOST_BINARY(11110001), // ceiling 1, floor 9
        BOOST_BINARY(00011111), BOOST_BINARY(10001111), // ceiling 4, floor 6
        BOOST_BINARY(00000000), BOOST_BINARY(00000001), // ceiling 1, no floor
        BOOST_BINARY(00011111), BOOST_BINARY(10000001), // ceiling 1, floor 6
        BOOST_BINARY(00011111), BOOST_BINARY(00001111), // ceiling 4, floor 5
        BOOST_BINARY(00011111), BOOST_BINARY(00000111), // ceiling 3, floor 5
        BOOST_BINARY(00011111), BOOST_BINARY(00000001), // ceiling 1, floor 5
        BOOST_BINARY(00011000), BOOST_BINARY(11111111), // ceiling 8, floor 2
        BOOST_BINARY(00011000), BOOST_BINARY(00001111), // ceiling 4, floor 2
        BOOST_BINARY(00011000), BOOST_BINARY(00000111), // ceiling 3, floor 2
        BOOST_BINARY(00011000), BOOST_BINARY(00000001), // ceiling 1, floor 2
        BOOST_BINARY(00011000), BOOST_BINARY(00000000), // no ceiling, floor 2
        BOOST_BINARY(00000000), BOOST_BINARY(00000000) // no ceiling or floor
    };
    writeData(TerrainRenderBits, TerrainRenderBits_data, sizeof(TerrainRenderBits_data));

    // BlockBuffLowBounds
    //
    const uint8_t BlockBuffLowBounds_data[] = {
        0xc0, 0x88, 0x51, 0x10
    };
    writeData(BlockBuffLowBounds, BlockBuffLowBounds_data, sizeof(BlockBuffLowBounds_data));

    // FrenzyIDData
    //
    const uint8_t FrenzyIDData_data[] = {
        Stop_Frenzy, BBill_CCheep_Frenzy, FlyCheepCheepFrenzy
    };
    writeData(FrenzyIDData, FrenzyIDData_data, sizeof(FrenzyIDData_data));

    // PulleyRopeMetatiles
    //
    const uint8_t PulleyRopeMetatiles_data[] = {
        0x43, 0x41, 0x42
    };
    writeData(PulleyRopeMetatiles, PulleyRopeMetatiles_data, sizeof(PulleyRopeMetatiles_data));

    // CastleMetatiles
    //
    const uint8_t CastleMetatiles_data[] = {
        0x4b, 0x47, 0x4b, 0x47, 0x4b,
        0x4a, 0x47, 0x4a, 0x47, 0x4a,
        0x47, 0x47, 0x47, 0x47, 0x47,
        0x47, 0x4b, 0x47, 0x4b, 0x47,
        0x47, 0x4a, 0x47, 0x4a, 0x47,
        0x49, 0x49, 0x49, 0x49, 0x49,
        0x47, 0x47, 0x4b, 0x47, 0x47,
        0x47, 0x47, 0x4a, 0x47, 0x47,
        0x45, 0x49, 0x49, 0x49, 0x45,
        0x00, 0x46, 0x47, 0x48, 0x00,
        0x00, 0x45, 0x45, 0x45, 0x00
    };
    writeData(CastleMetatiles, CastleMetatiles_data, sizeof(CastleMetatiles_data));

    // SidePipeShaftData
    //
    const uint8_t SidePipeShaftData_data[] = {
        0x00, 0x00, // is drawn, and if so, controls the metatile number
        0x14, 0x15 // used to control whether or not vertical pipe shaft
    };
    writeData(SidePipeShaftData, SidePipeShaftData_data, sizeof(SidePipeShaftData_data));

    // SidePipeTopPart
    //
    const uint8_t SidePipeTopPart_data[] = {
        0x1c, 0x1d,
        0x1e, 0x15 // top part of sideways part of pipe
    };
    writeData(SidePipeTopPart, SidePipeTopPart_data, sizeof(SidePipeTopPart_data));

    // SidePipeBottomPart
    //
    const uint8_t SidePipeBottomPart_data[] = {
        0x1f, 0x20,
        0x21, 0x15 // bottom part of sideways part of pipe
    };
    writeData(SidePipeBottomPart, SidePipeBottomPart_data, sizeof(SidePipeBottomPart_data));

    // VerticalPipeData
    //
    const uint8_t VerticalPipeData_data[] = {
        0x14, 0x15,
        0x12, 0x13, // used by decoration pipes
        0x14, 0x15,
        0x10, 0x11 // used by pipes that lead somewhere
    };
    writeData(VerticalPipeData, VerticalPipeData_data, sizeof(VerticalPipeData_data));

    // CoinMetatileData
    //
    const uint8_t CoinMetatileData_data[] = {
        0xc2, 0xc2, 0xc2, 0xc3
    };
    writeData(CoinMetatileData, CoinMetatileData_data, sizeof(CoinMetatileData_data));

    // C_ObjectRow
    //
    const uint8_t C_ObjectRow_data[] = {
        0x08, 0x07, 0x06
    };
    writeData(C_ObjectRow, C_ObjectRow_data, sizeof(C_ObjectRow_data));

    // C_ObjectMetatile
    //
    const uint8_t C_ObjectMetatile_data[] = {
        0x89, 0x0c, 0xc5
    };
    writeData(C_ObjectMetatile, C_ObjectMetatile_data, sizeof(C_ObjectMetatile_data));

    // SolidBlockMetatiles
    //
    const uint8_t SolidBlockMetatiles_data[] = {
        0x62, 0x61, 0x61, 0x69
    };
    writeData(SolidBlockMetatiles, SolidBlockMetatiles_data, sizeof(SolidBlockMetatiles_data));

    // BrickMetatiles
    //
    const uint8_t BrickMetatiles_data[] = {
        0x88, // used only by row of bricks object
        0x52, 0x52, 0x51, 0x22
    };
    writeData(BrickMetatiles, BrickMetatiles_data, sizeof(BrickMetatiles_data));

    // StaircaseHeightData
    //
    const uint8_t StaircaseHeightData_data[] = {
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x07
    };
    writeData(StaircaseHeightData, StaircaseHeightData_data, sizeof(StaircaseHeightData_data));

    // StaircaseRowData
    //
    const uint8_t StaircaseRowData_data[] = {
        0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x03
    };
    writeData(StaircaseRowData, StaircaseRowData_data, sizeof(StaircaseRowData_data));

    // HoleMetatiles
    //
    const uint8_t HoleMetatiles_data[] = {
        0x00, 0x00, 0x00, 0x87
    };
    writeData(HoleMetatiles, HoleMetatiles_data, sizeof(HoleMetatiles_data));

    // BlockBufferAddr
    //
    const uint8_t BlockBufferAddr_data[] = {
        HIBYTE(Block_Buffer_2), HIBYTE(Block_Buffer_1),
        LOBYTE(Block_Buffer_2), LOBYTE(Block_Buffer_1)
    };
    writeData(BlockBufferAddr, BlockBufferAddr_data, sizeof(BlockBufferAddr_data));

    // AreaDataOfsLoopback
    //
    const uint8_t AreaDataOfsLoopback_data[] = {
        0x40, 0x26, 0x0a, 0x32, 0x32, 0x32, 0x0e, 0x0e, 0x0e, 0x36, 0x12
    };
    writeData(AreaDataOfsLoopback, AreaDataOfsLoopback_data, sizeof(AreaDataOfsLoopback_data));

    // WorldAddrOffsets
    //
    const uint8_t WorldAddrOffsets_data[] = {
        World8Areas - AreaAddrOffsets, World7Areas - AreaAddrOffsets,
        World6Areas - AreaAddrOffsets, World5Areas - AreaAddrOffsets,
        World4Areas - AreaAddrOffsets, World3Areas - AreaAddrOffsets,
        World2Areas - AreaAddrOffsets, World1Areas - AreaAddrOffsets
    };
    writeData(WorldAddrOffsets, WorldAddrOffsets_data, sizeof(WorldAddrOffsets_data));

    // EnemyAddrHOffsets
    //
    const uint8_t EnemyAddrHOffsets_data[] = {
        0x00, 0x1c, 0x06, 0x1f
    };
    writeData(EnemyAddrHOffsets, EnemyAddrHOffsets_data, sizeof(EnemyAddrHOffsets_data));

    // EnemyDataAddrLow
    //
    const uint8_t EnemyDataAddrLow_data[] = {
        LOBYTE(E_WaterArea3), LOBYTE(E_WaterArea2), LOBYTE(E_WaterArea1), LOBYTE(E_UndergroundArea3), LOBYTE(E_UndergroundArea2),
        LOBYTE(E_UndergroundArea1), LOBYTE(E_GroundArea22), LOBYTE(E_GroundArea21), LOBYTE(E_GroundArea20), LOBYTE(E_GroundArea19),
        LOBYTE(E_GroundArea18), LOBYTE(E_GroundArea17), LOBYTE(E_GroundArea16), LOBYTE(E_GroundArea15), LOBYTE(E_GroundArea14), LOBYTE(E_GroundArea13),
        LOBYTE(E_GroundArea12), LOBYTE(E_GroundArea11), LOBYTE(E_GroundArea10), LOBYTE(E_GroundArea9), LOBYTE(E_GroundArea8), LOBYTE(E_GroundArea7),
        LOBYTE(E_GroundArea6), LOBYTE(E_GroundArea5), LOBYTE(E_GroundArea4), LOBYTE(E_GroundArea3), LOBYTE(E_GroundArea2), LOBYTE(E_GroundArea1),
        LOBYTE(E_CastleArea6), LOBYTE(E_CastleArea5), LOBYTE(E_CastleArea4), LOBYTE(E_CastleArea3), LOBYTE(E_CastleArea2), LOBYTE(E_CastleArea1)
    };
    writeData(EnemyDataAddrLow, EnemyDataAddrLow_data, sizeof(EnemyDataAddrLow_data));

    // EnemyDataAddrHigh
    //
    const uint8_t EnemyDataAddrHigh_data[] = {
        HIBYTE(E_WaterArea3), HIBYTE(E_WaterArea2), HIBYTE(E_WaterArea1), HIBYTE(E_UndergroundArea3), HIBYTE(E_UndergroundArea2),
        HIBYTE(E_UndergroundArea1), HIBYTE(E_GroundArea22), HIBYTE(E_GroundArea21), HIBYTE(E_GroundArea20), HIBYTE(E_GroundArea19),
        HIBYTE(E_GroundArea18), HIBYTE(E_GroundArea17), HIBYTE(E_GroundArea16), HIBYTE(E_GroundArea15), HIBYTE(E_GroundArea14), HIBYTE(E_GroundArea13),
        HIBYTE(E_GroundArea12), HIBYTE(E_GroundArea11), HIBYTE(E_GroundArea10), HIBYTE(E_GroundArea9), HIBYTE(E_GroundArea8), HIBYTE(E_GroundArea7),
        HIBYTE(E_GroundArea6), HIBYTE(E_GroundArea5), HIBYTE(E_GroundArea4), HIBYTE(E_GroundArea3), HIBYTE(E_GroundArea2), HIBYTE(E_GroundArea1),
        HIBYTE(E_CastleArea6), HIBYTE(E_CastleArea5), HIBYTE(E_CastleArea4), HIBYTE(E_CastleArea3), HIBYTE(E_CastleArea2), HIBYTE(E_CastleArea1)
    };
    writeData(EnemyDataAddrHigh, EnemyDataAddrHigh_data, sizeof(EnemyDataAddrHigh_data));

    // AreaDataHOffsets
    //
    const uint8_t AreaDataHOffsets_data[] = {
        0x1c, 0x19, 0x03, 0x00
    };
    writeData(AreaDataHOffsets, AreaDataHOffsets_data, sizeof(AreaDataHOffsets_data));

    // AreaDataAddrLow
    //
    const uint8_t AreaDataAddrLow_data[] = {
        LOBYTE(L_CastleArea6), LOBYTE(L_CastleArea5), LOBYTE(L_CastleArea4), LOBYTE(L_CastleArea3), LOBYTE(L_CastleArea2),
        LOBYTE(L_CastleArea1), LOBYTE(L_UndergroundArea3), LOBYTE(L_UndergroundArea2), LOBYTE(L_UndergroundArea1), LOBYTE(L_GroundArea22),
        LOBYTE(L_GroundArea21), LOBYTE(L_GroundArea20), LOBYTE(L_GroundArea19), LOBYTE(L_GroundArea18), LOBYTE(L_GroundArea17), LOBYTE(L_GroundArea16),
        LOBYTE(L_GroundArea15), LOBYTE(L_GroundArea14), LOBYTE(L_GroundArea13), LOBYTE(L_GroundArea12), LOBYTE(L_GroundArea11), LOBYTE(L_GroundArea10),
        LOBYTE(L_GroundArea9), LOBYTE(L_GroundArea8), LOBYTE(L_GroundArea7), LOBYTE(L_GroundArea6), LOBYTE(L_GroundArea5), LOBYTE(L_GroundArea4),
        LOBYTE(L_GroundArea3), LOBYTE(L_GroundArea2), LOBYTE(L_GroundArea1), LOBYTE(L_WaterArea3), LOBYTE(L_WaterArea2), LOBYTE(L_WaterArea1)
    };
    writeData(AreaDataAddrLow, AreaDataAddrLow_data, sizeof(AreaDataAddrLow_data));

    // AreaDataAddrHigh
    //
    const uint8_t AreaDataAddrHigh_data[] = {
        HIBYTE(L_CastleArea6), HIBYTE(L_CastleArea5), HIBYTE(L_CastleArea4), HIBYTE(L_CastleArea3), HIBYTE(L_CastleArea2),
        HIBYTE(L_CastleArea1), HIBYTE(L_UndergroundArea3), HIBYTE(L_UndergroundArea2), HIBYTE(L_UndergroundArea1), HIBYTE(L_GroundArea22),
        HIBYTE(L_GroundArea21), HIBYTE(L_GroundArea20), HIBYTE(L_GroundArea19), HIBYTE(L_GroundArea18), HIBYTE(L_GroundArea17), HIBYTE(L_GroundArea16),
        HIBYTE(L_GroundArea15), HIBYTE(L_GroundArea14), HIBYTE(L_GroundArea13), HIBYTE(L_GroundArea12), HIBYTE(L_GroundArea11), HIBYTE(L_GroundArea10),
        HIBYTE(L_GroundArea9), HIBYTE(L_GroundArea8), HIBYTE(L_GroundArea7), HIBYTE(L_GroundArea6), HIBYTE(L_GroundArea5), HIBYTE(L_GroundArea4),
        HIBYTE(L_GroundArea3), HIBYTE(L_GroundArea2), HIBYTE(L_GroundArea1), HIBYTE(L_WaterArea3), HIBYTE(L_WaterArea2), HIBYTE(L_WaterArea1)
    };
    writeData(AreaDataAddrHigh, AreaDataAddrHigh_data, sizeof(AreaDataAddrHigh_data));

    // E_CastleArea1
    //
    const uint8_t E_CastleArea1_data[] = {
        0xff,
        0xb5, 0x90, 0x28, 0xa6, 0x2d, 0x78, 0x4c, 0x30,
        0x08, 0x0f, 0x95, 0x88, 0x5d, 0xc9, 0x1b, 0x84, 0x1d, 0x49,
        0xdb, 0x04, 0x1d, 0xc9, 0x9d, 0x36, 0x1d, 0xc6, 0x9d, 0x16,
        0x5d, 0x56, 0xcc, 0x1b, 0x1d, 0xea, 0x4c, 0xbb, 0xdd, 0x76
    };
    writeData(E_CastleArea1, E_CastleArea1_data, sizeof(E_CastleArea1_data));

    // E_CastleArea2
    //
    const uint8_t E_CastleArea2_data[] = {
        0xff,
        0xb5, 0x90, 0x2d, 0x78,
        0x0c, 0x5b, 0x1b, 0x2a, 0x0a, 0x0f, 0x95, 0x48, 0x1b, 0xaa,
        0x1b, 0x36, 0x07, 0x0f, 0x1b, 0xc9, 0x1b, 0x56, 0x03, 0x0f
    };
    writeData(E_CastleArea2, E_CastleArea2_data, sizeof(E_CastleArea2_data));

    // E_CastleArea3
    //
    const uint8_t E_CastleArea3_data[] = {
        0xff,
        0xb5, 0x90, 0x28, 0xa6, 0x2d, 0x78,
        0xcc, 0x3b, 0xcc, 0x1b, 0x4c, 0xdb, 0x5c, 0x7b, 0x95, 0x20,
        0x1b, 0xca, 0x2c, 0x8a, 0x2b, 0x5a, 0x9d, 0x26, 0x1d, 0x99,
        0xdd, 0x3d, 0x1d, 0xd9, 0x5b, 0x7d, 0x1d, 0x75, 0x9d, 0x19,
        0xdb, 0xbd, 0x0c, 0xeb, 0x5f, 0x77, 0x4c, 0x4b, 0x8c, 0x0b
    };
    writeData(E_CastleArea3, E_CastleArea3_data, sizeof(E_CastleArea3_data));

    // E_CastleArea4
    //
    const uint8_t E_CastleArea4_data[] = {
        0xff,
        0xb5, 0x90,
        0x28, 0xa6, 0x2d, 0x78, 0x08, 0x0f, 0x0c, 0xdb, 0x0c, 0x7b,
        0x15, 0x70, 0x8c, 0x1b, 0x0c, 0x8b, 0x1d, 0x0b, 0x9b, 0x05,
        0x1b, 0x0b, 0x9d, 0x05, 0x1b, 0x6b, 0x1d, 0x65, 0x03, 0x0f,
        0x1d, 0xdb, 0x0c, 0xab, 0x1d, 0x8b, 0x1d, 0x3b, 0x8c, 0x0b
    };
    writeData(E_CastleArea4, E_CastleArea4_data, sizeof(E_CastleArea4_data));

    // E_CastleArea5
    //
    const uint8_t E_CastleArea5_data[] = {
        0xff,
        0xb5, 0x90, 0x2d, 0x78, 0x8c, 0x4b, 0x15, 0x60, 0x0b, 0x0f,
        0x1b, 0x77, 0x06, 0x0f, 0x29, 0x68, 0x0c, 0x4b, 0xa9, 0x27
    };
    writeData(E_CastleArea5, E_CastleArea5_data, sizeof(E_CastleArea5_data));

    // E_CastleArea6
    //
    const uint8_t E_CastleArea6_data[] = {
        0xff,
        0xb5, 0x90, 0x2d, 0x78, 0x95, 0x5b, 0x0c, 0x7b, 0x85, 0x1b,
        0xe1, 0xe5, 0xfe, 0x10, 0x0f, 0xe0, 0x02, 0x4e, 0x0e, 0x0f, 0xe1, 0x65, 0x4e,
        0x0d, 0x0f, 0xec, 0x65, 0xfe, 0x0e, 0xdb, 0x8e, 0xbb, 0x0e, 0xdb,
        0x0e, 0xbb, 0xe1, 0x65, 0x5e, 0x02, 0x2b, 0x02, 0x0b, 0x08, 0x0f,
        0xe7, 0xe5, 0x3e, 0xa8, 0x6d, 0x38, 0xbb, 0xe1, 0x65, 0x8e, 0x03, 0x0f
    };
    writeData(E_CastleArea6, E_CastleArea6_data, sizeof(E_CastleArea6_data));

    // E_GroundArea1
    //
    const uint8_t E_GroundArea1_data[] = {
        0xff,
        0x24, 0xc8, 0x24, 0x85, 0xa8, 0x46,
        0x03, 0xe8, 0x03, 0xc8, 0x8f, 0x24, 0x28, 0x7b, 0xa8, 0x05,
        0x28, 0xe9, 0x24, 0x88, 0xa4, 0x16, 0x83, 0x9b, 0x29, 0xc6,
        0x03, 0x69, 0x83, 0x45, 0xa8, 0x18, 0x28, 0xe4, 0x86, 0xa5
    };
    writeData(E_GroundArea1, E_GroundArea1_data, sizeof(E_GroundArea1_data));

    // E_GroundArea2
    //
    const uint8_t E_GroundArea2_data[] = {
        0xff,
        0x05, 0x9b, 0x05, 0x1b, 0x0b, 0x0f, 0x05, 0xfb,
        0x85, 0x2b, 0x80, 0x9b, 0x05, 0x7b, 0x05, 0x57, 0x07, 0x0f,
        0x8e, 0xdb, 0x85, 0x17, 0x05, 0xfb, 0x03, 0x0f, 0x8e, 0xeb
    };
    writeData(E_GroundArea2, E_GroundArea2_data, sizeof(E_GroundArea2_data));

    // E_GroundArea3
    //
    const uint8_t E_GroundArea3_data[] = {
        0xff,
        0x11, 0x12,
        0x0c, 0x0f, 0x11, 0x02, 0x07, 0x0f, 0x11, 0xe2, 0x66, 0xc2, 0x2e
    };
    writeData(E_GroundArea3, E_GroundArea3_data, sizeof(E_GroundArea3_data));

    // E_GroundArea4
    //
    const uint8_t E_GroundArea4_data[] = {
        0xff,
        0x0e, 0xe3, 0x0c, 0x0f,
        0x37, 0xcb, 0x02, 0x3b, 0x0a, 0x0f, 0x02, 0x83, 0xa6, 0x42, 0x7e,
        0x07, 0x0f, 0x02, 0xcb, 0xa0, 0xb4, 0x3e, 0x06, 0x43, 0x86, 0x33,
        0xa0, 0x00, 0xde, 0x82, 0x6b, 0x8e, 0xbb, 0x00, 0xab, 0xa8, 0xc2, 0x0e
    };
    writeData(E_GroundArea4, E_GroundArea4_data, sizeof(E_GroundArea4_data));

    // E_GroundArea5
    //
    const uint8_t E_GroundArea5_data[] = {
        0xff,
        0x00, 0xf3, 0x80, 0xc5, 0x0e, 0xbb,
        0x00, 0xa6, 0x0e, 0x8a, 0x8e, 0x5b, 0x38, 0xd0, 0x00, 0x83,
        0x80, 0x5b, 0x06, 0xc6, 0x86, 0xb7, 0x40, 0x34, 0xfe, 0x05, 0x4b,
        0x85, 0x17, 0x00, 0x5b, 0xb7, 0x10, 0xba, 0x50, 0x80, 0x1b,
        0xb8, 0x80, 0x86, 0x5b, 0x44, 0x42, 0xee, 0x0e, 0xca, 0x8e, 0x9b
    };
    writeData(E_GroundArea5, E_GroundArea5_data, sizeof(E_GroundArea5_data));

    // E_GroundArea6
    //
    const uint8_t E_GroundArea6_data[] = {
        0xff,
        0x37, 0x1b, 0x0b, 0x0f, 0xb7, 0x3b, 0x37, 0xfb,
        0xb7, 0x5b, 0x00, 0xbb, 0xb7, 0x4b, 0x06, 0x23, 0x06, 0x03,
        0x05, 0x0f, 0xb7, 0x63, 0x86, 0x8b, 0x06, 0x6b, 0x00, 0xc2, 0x1e
    };
    writeData(E_GroundArea6, E_GroundArea6_data, sizeof(E_GroundArea6_data));

    // E_GroundArea7
    //
    const uint8_t E_GroundArea7_data[] = {
        0xff,
        0x03, 0x5b, 0xa8, 0x36, 0x8f, 0x24, 0x83, 0xe5,
        0x28, 0xe9, 0x28, 0x68, 0x57, 0x2b, 0x86, 0x03, 0x8f, 0xa3,
        0xa5, 0x76, 0x06, 0xe2, 0x86, 0xc2, 0x03, 0xe3, 0xd7, 0x2b
    };
    writeData(E_GroundArea7, E_GroundArea7_data, sizeof(E_GroundArea7_data));

    // E_GroundArea8
    //
    const uint8_t E_GroundArea8_data[] = {
        0xff,
        0x50, 0xc8, 0x8a, 0x0f, 0xd0, 0xc6, 0x43, 0x7b, 0x07, 0x0f,
        0xc3, 0xf8, 0xc3, 0xf8, 0xce, 0x48, 0x40, 0x78, 0x02, 0x0f
    };
    writeData(E_GroundArea8, E_GroundArea8_data, sizeof(E_GroundArea8_data));

    // E_GroundArea9
    //
    const uint8_t E_GroundArea9_data[] = {
        0x80, 0x9b, 0x0e, 0xbb, 0x0e, 0x9b, 0xb7, 0x5b, 0x8e, 0x7b,
        0x80, 0x9b, 0x06, 0x8b, 0x86, 0x49, 0x20, 0x42, 0xfe, 0x86, 0x77,
        0xb8, 0xab, 0x38, 0x7b, 0x80, 0x2b, 0x20, 0x2b, 0xfe, 0x37, 0xeb,
        0x80, 0x77, 0x37, 0xdb, 0x00, 0x1b, 0x80, 0x0b, 0x86, 0x85
    };
    writeData(E_GroundArea9, E_GroundArea9_data, sizeof(E_GroundArea9_data));

    // E_GroundArea10
    //
    const uint8_t E_GroundArea10_data[] = {
        0xff
    };
    writeData(E_GroundArea10, E_GroundArea10_data, sizeof(E_GroundArea10_data));

    // E_GroundArea11
    //
    const uint8_t E_GroundArea11_data[] = {
        0xff,
        0x0e, 0x67, 0x0e, 0x2b,
        0x0b, 0x0f, 0x88, 0x42, 0xee, 0xbb, 0x30, 0xb8, 0xa0, 0x00, 0xfb,
        0xb8, 0xc0, 0xb8, 0xa0, 0x8e, 0x7b, 0x38, 0xf0, 0xb8, 0x40,
        0x8e, 0xdb, 0x3b, 0xc0, 0xb8, 0x10, 0x38, 0x60, 0x80, 0x0b
    };
    writeData(E_GroundArea11, E_GroundArea11_data, sizeof(E_GroundArea11_data));

    // E_GroundArea12
    //
    const uint8_t E_GroundArea12_data[] = {
        0xff,
        0x88, 0x31, 0x0e, 0x2a, 0x28, 0x0e, 0xaa, 0x0a
    };
    writeData(E_GroundArea12, E_GroundArea12_data, sizeof(E_GroundArea12_data));

    // E_GroundArea13
    //
    const uint8_t E_GroundArea13_data[] = {
        0xff,
        0x25, 0x85, 0x08, 0x0f, 0x24, 0xc9,
        0x24, 0x65, 0xa4, 0x09, 0x24, 0xb5, 0x24, 0x89, 0xa4, 0x05,
        0x03, 0xe3, 0x83, 0x4b, 0x25, 0xe4, 0x25, 0xa6, 0x24, 0x78,
        0xa4, 0x05, 0x03, 0x7a, 0x8f, 0x42, 0x03, 0xd7, 0x83, 0xc7
    };
    writeData(E_GroundArea13, E_GroundArea13_data, sizeof(E_GroundArea13_data));

    // E_GroundArea14
    //
    const uint8_t E_GroundArea14_data[] = {
        0xff,
        0x29, 0x97, 0x29, 0x58,
        0xa9, 0x16, 0x29, 0xd7, 0xa4, 0x19, 0x24, 0xe6, 0x28, 0x95,
        0x07, 0x0f, 0xa4, 0x19, 0x24, 0xe5, 0x24, 0xa9, 0xa4, 0x65,
        0x25, 0xcc, 0x28, 0x76, 0xa8, 0x07, 0xa8, 0xb5, 0xa5, 0xcd
    };
    writeData(E_GroundArea14, E_GroundArea14_data, sizeof(E_GroundArea14_data));

    // E_GroundArea15
    //
    const uint8_t E_GroundArea15_data[] = {
        0xff,
        0x11, 0x02, 0x07, 0x0f, 0x11, 0x02, 0x02, 0x0f
    };
    writeData(E_GroundArea15, E_GroundArea15_data, sizeof(E_GroundArea15_data));

    // E_GroundArea16
    //
    const uint8_t E_GroundArea16_data[] = {
        0xff
    };
    writeData(E_GroundArea16, E_GroundArea16_data, sizeof(E_GroundArea16_data));

    // E_GroundArea17
    //
    const uint8_t E_GroundArea17_data[] = {
        0xff,
        0xbc, 0x6b, 0x80, 0xcb, 0x00, 0x1b,
        0x13, 0x0f, 0x02, 0xbb, 0xb7, 0x3b, 0x38, 0xbb, 0xb8, 0x4b,
        0x82, 0xeb, 0xb8, 0xbb, 0x3b, 0x2b, 0x0d, 0x0f, 0x8e, 0x1b, 0x0e,
        0xcb, 0x8e, 0x1b, 0xb8, 0x7b, 0xbc, 0x5b, 0x3c, 0xfb, 0x80,
        0x7b, 0xb8, 0xfb, 0x82, 0x1b, 0xb8, 0x8b, 0x80, 0xdb, 0x3b,
        0xeb, 0xb8, 0x1b, 0xe2, 0x42, 0xde, 0x38, 0xab, 0x82, 0x2b
    };
    writeData(E_GroundArea17, E_GroundArea17_data, sizeof(E_GroundArea17_data));

    // E_GroundArea18
    //
    const uint8_t E_GroundArea18_data[] = {
        0xff,
        0x8e, 0xa7, 0x0e, 0x6b, 0x8e, 0x3b, 0x03, 0xd3, 0x06, 0xcb,
        0x86, 0xbb, 0x02, 0xab, 0x02, 0x9b, 0x82, 0x8b, 0x05, 0xc3,
        0x85, 0x87, 0x8e, 0xab, 0x80, 0x2b, 0x4e, 0x85, 0x16, 0x86, 0x17,
        0x86, 0xf9, 0x05, 0xe8, 0x8e, 0x8b, 0x80, 0x00, 0xae, 0x80, 0x7b
    };
    writeData(E_GroundArea18, E_GroundArea18_data, sizeof(E_GroundArea18_data));

    // E_GroundArea19
    //
    const uint8_t E_GroundArea19_data[] = {
        0xff,
        0x8e, 0xb6, 0x02, 0xdb,
        0x06, 0xa6, 0x86, 0x88, 0x0e, 0xf9, 0x0e, 0xcb, 0x0e, 0xab,
        0x0a, 0x0f, 0x8e, 0xbb, 0xe8, 0x42, 0xfe, 0x02, 0xbb, 0x82, 0x9b,
        0x82, 0xfb, 0x0e, 0xfb, 0x8e, 0xcb, 0x0e, 0x5b, 0x8e, 0x2b,
        0x0e, 0x9b, 0x03, 0x0f, 0x0e, 0x83, 0x11, 0x52, 0x8e, 0x29
    };
    writeData(E_GroundArea19, E_GroundArea19_data, sizeof(E_GroundArea19_data));

    // E_GroundArea20
    //
    const uint8_t E_GroundArea20_data[] = {
        0xff,
        0x02, 0x92, 0x0a, 0x0f, 0x05, 0x97,
        0x85, 0x7b, 0x00, 0x2b, 0x07, 0x0f, 0x45, 0x67, 0x85, 0x4b,
        0xce, 0x1b, 0x8e, 0x5b, 0xce, 0xcb, 0xc0, 0x42, 0xde, 0xce, 0xab
    };
    writeData(E_GroundArea20, E_GroundArea20_data, sizeof(E_GroundArea20_data));

    // E_GroundArea21
    //
    const uint8_t E_GroundArea21_data[] = {
        0xff,
        0xaa, 0x23, 0x1e, 0x4a, 0x24, 0x0e, 0xaa, 0x0a
    };
    writeData(E_GroundArea21, E_GroundArea21_data, sizeof(E_GroundArea21_data));

    // E_GroundArea22
    //
    const uint8_t E_GroundArea22_data[] = {
        0xff,
        0x38, 0xfb, 0xb8, 0x6b, 0x00, 0xfb,
        0xbc, 0x5b, 0xbb, 0x9b, 0x3c, 0xfb, 0x80, 0x6b, 0xb8, 0xab,
        0x80, 0xfb, 0x8e, 0xcb, 0x00, 0xeb, 0x38, 0xab, 0x00, 0x2b,
        0x04, 0x0f, 0x3b, 0xeb, 0xbc, 0x4b, 0x38, 0xbb, 0x80, 0x1b
    };
    writeData(E_GroundArea22, E_GroundArea22_data, sizeof(E_GroundArea22_data));

    // E_UndergroundArea1
    //
    const uint8_t E_UndergroundArea1_data[] = {
        0xff,
        0xb4, 0x27,
        0x0b, 0x25, 0xee, 0x26, 0xa9, 0x26, 0xa1, 0x83, 0x2b, 0x27, 0xbd,
        0x27, 0xb7, 0xb9, 0xa0, 0x86, 0x1b, 0xb8, 0x60, 0x06, 0x0f,
        0x39, 0xf0, 0x06, 0x93, 0x86, 0x0b, 0x06, 0xeb, 0x80, 0xbb,
        0x3b, 0xf0, 0x02, 0xc2, 0xde, 0x06, 0xdb, 0x06, 0x1a, 0x86, 0x0b
    };
    writeData(E_UndergroundArea1, E_UndergroundArea1_data, sizeof(E_UndergroundArea1_data));

    // E_UndergroundArea2
    //
    const uint8_t E_UndergroundArea2_data[] = {
        0xff,
        0x6b, 0x25, 0xee,
        0x34, 0x87, 0x82, 0x3b, 0xbb, 0xb0, 0x27, 0xbc, 0x27, 0xb5,
        0x82, 0xa8, 0x80, 0x9b, 0x26, 0xb9, 0x26, 0xb2, 0x27, 0x2c,
        0xa7, 0x25, 0xbb, 0x70, 0x68, 0x42, 0xfe, 0x02, 0x8b, 0x82, 0x3b,
        0x80, 0xdb, 0xa7, 0xa5, 0x3a, 0xe0, 0x60, 0x2f, 0x1e, 0x02, 0x0f
    };
    writeData(E_UndergroundArea2, E_UndergroundArea2_data, sizeof(E_UndergroundArea2_data));

    // E_UndergroundArea3
    //
    const uint8_t E_UndergroundArea3_data[] = {
        0xff,
        0xea, 0x32, 0x2e,
        0xa2, 0x23, 0x2e, 0x8a, 0x2a, 0x1e, 0x68, 0x41, 0x1e, 0x09, 0x0f, 0xab, 0x23, 0x2e,
        0x6a, 0x22, 0x1e, 0x07, 0x0f, 0x44, 0x24, 0x1e, 0x05, 0x0f, 0xe7, 0x30, 0x2e,
        0x07, 0x40, 0x1e, 0x03, 0x0f, 0xc7, 0x33, 0x2e, 0x27, 0x28, 0x2e, 0x0a, 0xa5, 0x1e
    };
    writeData(E_UndergroundArea3, E_UndergroundArea3_data, sizeof(E_UndergroundArea3_data));

    // E_WaterArea1
    //
    const uint8_t E_WaterArea1_data[] = {
        0xff,
        0x07, 0xdb, 0x87, 0x3b,
        0xa7, 0x23, 0xee, 0x87, 0x31, 0xee, 0x27, 0xcc, 0x27, 0x66, 0x87, 0x3b
    };
    writeData(E_WaterArea1, E_WaterArea1_data, sizeof(E_WaterArea1_data));

    // E_WaterArea2
    //
    const uint8_t E_WaterArea2_data[] = {
        0xff,
        0xc7, 0x3b, 0xc7, 0xdb, 0x47, 0x68, 0x09, 0x0f,
        0x87, 0x9b, 0x07, 0xe3, 0x47, 0xab, 0x87, 0x38, 0x07, 0x78,
        0xc7, 0xd6, 0x07, 0x7a, 0xc7, 0x47, 0x87, 0xe9, 0x47, 0x97,
        0x07, 0x6b, 0xcb, 0x25, 0x4e, 0x4b, 0x25, 0x2e, 0x2b, 0x25, 0x2e, 0x01, 0x0f
    };
    writeData(E_WaterArea2, E_WaterArea2_data, sizeof(E_WaterArea2_data));

    // E_WaterArea3
    //
    const uint8_t E_WaterArea3_data[] = {
        0xff,
        0xf0, 0x65, 0x2e, 0x9d, 0x07, 0x1b, 0x88, 0x07, 0x56,
        0x87, 0x3a, 0x9b, 0x86, 0x1d, 0xfa, 0x07, 0xcb, 0x9b, 0x47
    };
    writeData(E_WaterArea3, E_WaterArea3_data, sizeof(E_WaterArea3_data));

    // L_CastleArea1
    //
    const uint8_t L_CastleArea1_data[] = {
        0xfd,
        0xc7, 0x5d, 0x02, 0xfe,
        0x42, 0xdd, 0x0b, 0xde, 0x09, 0xce, 0x43, 0xcd, 0xc4, 0x0d,
        0x0a, 0xfe, 0x07, 0xae, 0x02, 0x7e, 0x06, 0x3e, 0x02, 0x13,
        0x82, 0x07, 0x02, 0xe3, 0x02, 0xd7, 0x02, 0xb3, 0x02, 0xa7,
        0x02, 0x7e, 0x87, 0x0e, 0x0a, 0xc7, 0x0a, 0x82, 0x60, 0x81,
        0x0a, 0x47, 0x0a, 0x02, 0xe0, 0x01, 0x0a, 0xc7, 0x06, 0x7e,
        0x8a, 0x34, 0x0a, 0xc4, 0x8a, 0x14, 0x0a, 0x54, 0x0b, 0x4e,
        0x89, 0x2e, 0x0a, 0xfe, 0x0a, 0xe8, 0x00, 0xe4, 0x06, 0xce,
        0x0a, 0x9e, 0x06, 0x7e, 0x0a, 0x74, 0xe0, 0x73, 0x07, 0xee,
        0x51, 0xdc, 0x03, 0xce, 0x34, 0x07, 0x33, 0x06, 0x32, 0x05,
        0x07, 0x9b
    };
    writeData(L_CastleArea1, L_CastleArea1_data, sizeof(L_CastleArea1_data));

    // L_CastleArea2
    //
    const uint8_t L_CastleArea2_data[] = {
        0xfd,
        0xc7, 0x5d, 0x02, 0xfe,
        0x42, 0xdd, 0x0b, 0xde, 0x09, 0xce, 0x43, 0xcd, 0xc4, 0x0d,
        0x0a, 0xfe, 0x06, 0xde, 0x02, 0xbe, 0x06, 0x7e, 0x01, 0x2e,
        0x03, 0x0e, 0xe4, 0x03, 0x4b, 0xcd, 0x3f, 0x08, 0xbf, 0x04,
        0x3f, 0x08, 0xbf, 0x04, 0x31, 0xe4, 0x31, 0xa4, 0x63, 0x94,
        0x33, 0x44, 0x3f, 0x08, 0xb1, 0x04, 0x61, 0xf4, 0x62, 0xe6,
        0x02, 0xee, 0x30, 0xd5, 0x33, 0xa8, 0x63, 0xa9, 0x31, 0x96,
        0x0a, 0x7e, 0x31, 0x68, 0x05, 0x0d, 0x02, 0xfe, 0x4b, 0xcd,
        0x08, 0xce, 0x02, 0xae, 0x04, 0x0d, 0x0e, 0xbe, 0x72, 0x88,
        0x35, 0x64, 0x02, 0x5e, 0x0e, 0x2e, 0xe3, 0x14, 0x63, 0xf4,
        0x63, 0xd4, 0x63, 0xb4, 0x63, 0x94, 0x02, 0x7e, 0x0e, 0x1e,
        0x01, 0x0d, 0x02, 0xfe, 0x06, 0xce, 0x64, 0xa8, 0x64, 0x98,
        0x64, 0x68, 0x0a, 0x5e, 0x34, 0x07, 0x33, 0x06, 0x32, 0x05,
        0x07, 0x5b
    };
    writeData(L_CastleArea2, L_CastleArea2_data, sizeof(L_CastleArea2_data));

    // L_CastleArea3
    //
    const uint8_t L_CastleArea3_data[] = {
        0xfd,
        0xc7, 0x5d,
        0x02, 0xfe, 0x0b, 0xde, 0x42, 0xdd, 0x09, 0xce, 0x43, 0xcd,
        0x44, 0x0d, 0xa5, 0x03, 0x0a, 0xfe, 0x07, 0xde, 0x03, 0xbe,
        0x07, 0x9e, 0x03, 0x7e, 0x07, 0x2e, 0xe4, 0x08, 0x64, 0xf8,
        0x64, 0xc8, 0x00, 0xbe, 0x0a, 0x79, 0x42, 0x6a, 0x42, 0x66,
        0x81, 0x2e, 0x07, 0xfe, 0x07, 0xce, 0x63, 0xc9, 0x0a, 0xc8,
        0x43, 0xbe, 0x00, 0x9f, 0x00, 0x6f, 0x64, 0x38, 0x40, 0x3e,
        0x00, 0x2e, 0x8a, 0x24, 0x08, 0xfe, 0x0a, 0x97, 0x8a, 0x3b,
        0x3a, 0xe7, 0x0a, 0xd7, 0x0a, 0x7b, 0x0a, 0x73, 0x3a, 0x27,
        0x8a, 0x17, 0x0a, 0xbb, 0x3b, 0x57, 0x04, 0x1e, 0x64, 0x18,
        0xe4, 0x08, 0x31, 0xb7, 0x00, 0x71, 0x0a, 0x75, 0x32, 0x65,
        0xb1, 0x27, 0x00, 0xfe, 0x34, 0x07, 0x33, 0x06, 0x32, 0x05,
        0x07, 0x9b
    };
    writeData(L_CastleArea3, L_CastleArea3_data, sizeof(L_CastleArea3_data));

    // L_CastleArea4
    //
    const uint8_t L_CastleArea4_data[] = {
        0xfd,
        0xc7, 0x5d, 0x02, 0xfe, 0x42, 0xdd,
        0x0b, 0xde, 0x09, 0xce, 0x43, 0xcd, 0x52, 0x51, 0x52, 0x41,
        0xc4, 0x0d, 0x0a, 0xfe, 0x07, 0x5e, 0x83, 0x3e, 0x07, 0xee,
        0x0a, 0xbe, 0x06, 0x8e, 0x0a, 0x5e, 0x86, 0x2e, 0x0a, 0xfe,
        0x07, 0x9e, 0x0a, 0x7e, 0x02, 0x1e, 0x42, 0x14, 0x0a, 0x09,
        0x8a, 0x03, 0x32, 0xfa, 0x03, 0xee, 0x02, 0x1e, 0x0a, 0x09,
        0x8a, 0x03, 0x32, 0xfa, 0x03, 0xee, 0x02, 0x7e, 0x0a, 0x69,
        0x0a, 0x63, 0x32, 0x5a, 0x83, 0x4e, 0x02, 0xfe, 0x0a, 0xde,
        0x01, 0xc7, 0x00, 0xb7, 0x01, 0xa7, 0x83, 0x2e, 0x01, 0xfc,
        0x0a, 0xd9, 0x01, 0xac, 0x0a, 0x89, 0x01, 0x5c, 0x0a, 0x39,
        0x81, 0x0c, 0x06, 0xfe, 0x34, 0x07, 0x33, 0x06, 0x32, 0x05,
        0x07, 0x9b
    };
    writeData(L_CastleArea4, L_CastleArea4_data, sizeof(L_CastleArea4_data));

    // L_CastleArea5
    //
    const uint8_t L_CastleArea5_data[] = {
        0xfd,
        0xc7, 0x5d, 0x02, 0xfe, 0x42, 0xdd,
        0x0b, 0xde, 0x09, 0xce, 0x43, 0xcd, 0xc4, 0x0d, 0x0a, 0xfe,
        0x06, 0x9e, 0x02, 0x7e, 0x06, 0x5e, 0x02, 0x3e, 0x86, 0x1e,
        0x02, 0xfe, 0x06, 0x7e, 0x02, 0x5e, 0x86, 0x2e, 0x02, 0xfe,
        0x4b, 0xdd, 0x86, 0xce, 0x4b, 0xdd, 0x06, 0xce, 0x61, 0xc9,
        0x30, 0xba, 0x3e, 0xa4, 0x63, 0x94, 0x32, 0x58, 0xb2, 0x44,
        0x4b, 0xdd, 0x36, 0xc8, 0x36, 0xb4, 0x32, 0x78, 0x32, 0x64,
        0x82, 0x3e, 0x0e, 0xde, 0x02, 0xae, 0x33, 0xa4, 0x61, 0x7b,
        0x0a, 0x75, 0x32, 0x64, 0x0a, 0x3e, 0x31, 0x34, 0x06, 0x0d,
        0x02, 0xfe, 0x06, 0xce, 0x4b, 0xbd, 0x31, 0xa4, 0x61, 0x94,
        0x62, 0x84, 0x82, 0x7e, 0x4b, 0x7d, 0x8e, 0x5e, 0x4b, 0x7d,
        0x3a, 0x74, 0x3c, 0x68, 0x82, 0x1e, 0x0e, 0x5e, 0x62, 0x55,
        0x61, 0x46, 0x32, 0x27, 0x02, 0x0d, 0x02, 0xfe, 0x07, 0xbe,
        0x86, 0xae, 0x0a, 0xfe, 0x34, 0x07, 0x33, 0x06, 0x32, 0x05,
        0x07, 0x5b
    };
    writeData(L_CastleArea5, L_CastleArea5_data, sizeof(L_CastleArea5_data));

    // L_CastleArea6
    //
    const uint8_t L_CastleArea6_data[] = {
        0xfd,
        0xc7, 0x5d, 0x02, 0xfe, 0x42, 0xdd, 0x0b, 0xde, 0x09, 0xce,
        0x43, 0xcd, 0xc4, 0x0d, 0x0a, 0xfe, 0x07, 0x9e, 0x8a, 0x4e,
        0x7b, 0xa9, 0xf3, 0x39, 0x82, 0xfe, 0x4a, 0xad, 0x7e, 0x46,
        0xcb, 0x3d, 0x06, 0xfe, 0x48, 0xdd, 0x0a, 0xbe, 0xff, 0x45,
        0x76, 0xc6, 0x06, 0x5e, 0x73, 0x39, 0x0c, 0x0d, 0x02, 0xfe,
        0x0b, 0x0d, 0x31, 0x87, 0x7a, 0x84, 0x02, 0x67, 0x82, 0x2e,
        0x0a, 0xfe, 0x74, 0xe8, 0xfb, 0x49, 0x4b, 0xed, 0x74, 0xa8,
        0x73, 0x39, 0x07, 0x0d, 0x82, 0xfe, 0x02, 0xfe, 0x77, 0xa5,
        0xfe, 0x16, 0x33, 0xc4, 0x06, 0xae, 0x8a, 0x1e, 0x06, 0xde,
        0x4b, 0x4d, 0x7b, 0x39, 0x03, 0x0d, 0x73, 0x39, 0x01, 0x0d,
        0x02, 0xae, 0x0a, 0x5e, 0x34, 0x07, 0x33, 0x06, 0x32, 0x05,
        0x06, 0x5b
    };
    writeData(L_CastleArea6, L_CastleArea6_data, sizeof(L_CastleArea6_data));

    // L_GroundArea1
    //
    const uint8_t L_GroundArea1_data[] = {
        0xfd,
        0x20, 0xcf, 0x42, 0x9e, 0xc1, 0x7d,
        0x11, 0xfe, 0x14, 0xdf, 0x11, 0x9f, 0x94, 0x9c, 0x1b, 0x78,
        0x92, 0x4b, 0x40, 0xd4, 0x40, 0xc8, 0x12, 0xc5, 0x14, 0xb9,
        0x41, 0x92, 0x13, 0x83, 0x92, 0x17, 0x40, 0xa3, 0x14, 0x9f,
        0x40, 0x83, 0x13, 0x49, 0x12, 0x2f, 0x17, 0x2c, 0xc0, 0x13,
        0x40, 0xe1, 0x12, 0xd2, 0x40, 0xa4, 0x12, 0x95, 0x40, 0x64,
        0x12, 0x55, 0x40, 0x24, 0x1f, 0x1b, 0x92, 0x15, 0x41, 0x80,
        0x13, 0x71, 0x42, 0x47, 0x80, 0x11, 0x15, 0xf5, 0x19, 0xe9,
        0x13, 0xb7, 0x42, 0xa4, 0x40, 0x54, 0x96, 0x4a, 0x41, 0xfa,
        0x12, 0xeb, 0x15, 0x65, 0x94, 0x28, 0x10, 0xfe, 0x26, 0x0f,
        0x11, 0x94
    };
    writeData(L_GroundArea1, L_GroundArea1_data, sizeof(L_GroundArea1_data));

    // L_GroundArea2
    //
    const uint8_t L_GroundArea2_data[] = {
        0xfd,
        0x20, 0xef,
        0x42, 0xbe, 0xc1, 0x6d, 0x31, 0xfe, 0x31, 0xc3, 0x60, 0xa5,
        0x60, 0x87, 0x60, 0x69, 0x00, 0x4e, 0xe1, 0x39, 0x40, 0xfe,
        0x87, 0xe7, 0x42, 0xbe, 0x72, 0x88, 0x40, 0x5e, 0x0a, 0x0d,
        0x42, 0x3e, 0x81, 0x0c, 0x73, 0xe7, 0x01, 0xcc, 0x04, 0x43,
        0x27, 0x37, 0xa7, 0x33, 0x63, 0xe7, 0x63, 0xd7, 0x40, 0xae,
        0xc2, 0x0e, 0x62, 0xf8, 0x40, 0xde, 0x42, 0x7e, 0x11, 0x69,
        0xc0, 0x4e, 0x42, 0xee, 0x01, 0xbc, 0x60, 0xaa, 0x61, 0x99,
        0x62, 0x88, 0x63, 0x77, 0x01, 0x5c, 0x20, 0x33, 0x84, 0x23,
        0x27, 0xc7, 0x25, 0xc3, 0x73, 0x57, 0xc0, 0x2e, 0x42, 0x4e,
        0x92, 0x28, 0x40, 0xfe, 0x42, 0x7e, 0x91, 0x29, 0x26, 0x0f,
        0xb1, 0x90
    };
    writeData(L_GroundArea2, L_GroundArea2_data, sizeof(L_GroundArea2_data));

    // L_GroundArea3
    //
    const uint8_t L_GroundArea3_data[] = {
        0xfd,
        0x26, 0x5f, 0xc1, 0x1d, 0x4a, 0xed, 0x07, 0xc7, 0x38, 0x0f,
        0x0d, 0x0d, 0x01, 0xec, 0x62, 0xd8, 0x81, 0x4c, 0x02, 0xec,
        0xf1, 0x39, 0x72, 0x7c, 0x01, 0x5c, 0x21, 0x57, 0x00, 0x47,
        0x63, 0x4c, 0xf1, 0x2c, 0x43, 0x74, 0xfb, 0x47, 0x43, 0x74,
        0xf3, 0x47, 0x43, 0x94, 0xe2, 0x78, 0x03, 0xc3, 0xf3, 0xac,
        0x03, 0xec, 0x01, 0x27, 0x01, 0x23, 0x01, 0x07, 0x01, 0x03,
        0x04, 0x0d, 0x40, 0xc7, 0x41, 0xa6, 0x40, 0x97, 0x81, 0x0c,
        0x00, 0x97, 0x01, 0x93, 0xf2, 0x58, 0x40, 0x6e, 0x20, 0x0f,
        0x21, 0x52
    };
    writeData(L_GroundArea3, L_GroundArea3_data, sizeof(L_GroundArea3_data));

    // L_GroundArea4
    //
    const uint8_t L_GroundArea4_data[] = {
        0xfd,
        0x26, 0xcf, 0xc1, 0x8d, 0x67, 0xf3, 0x67, 0xe3, 0x66, 0xd4,
        0x65, 0xc5, 0x64, 0xb6, 0x73, 0x97, 0xb1, 0x7f, 0x72, 0xd8,
        0x73, 0x77, 0x72, 0x58, 0xf1, 0x39, 0x73, 0xe7, 0x31, 0x77,
        0x72, 0x74, 0x22, 0x07, 0xa2, 0x03, 0x61, 0xd9, 0x63, 0xc7,
        0x7a, 0x98, 0x00, 0x8c, 0x32, 0x5f, 0x21, 0x13, 0xa2, 0x07,
        0x00, 0xfc, 0x00, 0xdc, 0x20, 0xd3, 0x06, 0xc3, 0x21, 0xa6,
        0x71, 0x79, 0xf1, 0x39, 0x05, 0xbc, 0x28, 0x73, 0x71, 0x39,
        0x20, 0x33, 0xa0, 0x17, 0x31, 0xf7, 0x72, 0xf4, 0x20, 0xe7,
        0x71, 0x99, 0xf3, 0x67, 0x72, 0xe8, 0x75, 0x75, 0x71, 0x49,
        0x02, 0x27, 0x05, 0x13, 0xf2, 0x08, 0x23, 0xd3, 0x71, 0xa9,
        0x71, 0x39, 0xa4, 0x33, 0x31, 0xe7, 0x71, 0xe5, 0x7c, 0x86,
        0x04, 0x47, 0xa0, 0x37, 0x73, 0xe7, 0x71, 0x59, 0x71, 0x39,
        0x31, 0x06, 0xf1, 0x04, 0x73, 0xc7, 0x20, 0x93, 0x02, 0x87,
        0x07, 0x83, 0x20, 0x73, 0xfb, 0x37, 0x22, 0xa7, 0x26, 0x0f,
        0x21, 0x54
    };
    writeData(L_GroundArea4, L_GroundArea4_data, sizeof(L_GroundArea4_data));

    // L_GroundArea5
    //
    const uint8_t L_GroundArea5_data[] = {
        0xfd,
        0x26, 0xcf, 0xc1, 0x8d,
        0x38, 0x7f, 0x82, 0x1c, 0x65, 0xf5, 0x62, 0xe8, 0x22, 0x87,
        0x07, 0x77, 0xa0, 0x67, 0x20, 0xd7, 0x20, 0xd3, 0x00, 0xc7,
        0x01, 0xc3, 0x20, 0xb7, 0x20, 0xb3, 0x20, 0x87, 0x20, 0x83,
        0x01, 0x77, 0x01, 0x73, 0x20, 0x67, 0xa0, 0x63, 0x01, 0xec,
        0x35, 0x8f, 0x05, 0x33, 0x22, 0x16, 0x21, 0x13, 0x83, 0x0c,
        0x0b, 0xe9, 0x22, 0x63, 0x00, 0x53, 0x22, 0x23, 0x81, 0x13,
        0x2a, 0xf7, 0x21, 0xf3, 0xf3, 0x77, 0x21, 0xb3, 0x06, 0xa3,
        0x61, 0x99, 0x63, 0x87, 0x51, 0x6c, 0x63, 0x57, 0x83, 0x23,
        0x57, 0xdc, 0x27, 0xdc, 0x33, 0x9f, 0xf1, 0x39, 0x20, 0xd7,
        0xf2, 0x98, 0x02, 0xdc, 0x7b, 0x67, 0xf2, 0x08, 0x22, 0xa7,
        0x00, 0x66, 0x01, 0x36, 0x81, 0x07, 0x66, 0x6e, 0x20, 0x0f,
        0x31, 0x52
    };
    writeData(L_GroundArea5, L_GroundArea5_data, sizeof(L_GroundArea5_data));

    // L_GroundArea6
    //
    const uint8_t L_GroundArea6_data[] = {
        0xfd,
        0x26, 0xaf, 0xc1, 0x6d, 0x38, 0x5f, 0xf1, 0x39,
        0x20, 0xb7, 0x01, 0xa7, 0x21, 0x87, 0xf1, 0x39, 0x60, 0xea,
        0x61, 0xd9, 0x62, 0xc8, 0x63, 0xb7, 0x01, 0x9c, 0x63, 0x87,
        0xb3, 0x4f, 0x60, 0xfa, 0x61, 0xe9, 0x62, 0xd8, 0x63, 0xc7,
        0x33, 0x6f, 0x21, 0x17, 0x61, 0x1c, 0xa3, 0x03, 0x22, 0x93,
        0x20, 0x67, 0x81, 0x07, 0x01, 0xd7, 0x00, 0xd3, 0x01, 0xa7,
        0x06, 0x57, 0xa0, 0x47, 0x07, 0xe7, 0x01, 0xe3, 0x22, 0xb3,
        0x02, 0x6c, 0xa7, 0x03, 0x00, 0xe7, 0x22, 0xd7, 0x01, 0x5c,
        0x83, 0x06, 0xfb, 0x97, 0x73, 0xe7, 0xf2, 0x68, 0x71, 0xc9,
        0x01, 0x77, 0x01, 0x63, 0x00, 0x57, 0x24, 0x47, 0x81, 0x07,
        0x21, 0x50
    };
    writeData(L_GroundArea6, L_GroundArea6_data, sizeof(L_GroundArea6_data));

    // L_GroundArea7
    //
    const uint8_t L_GroundArea7_data[] = {
        0xfd,
        0x20, 0xdf,
        0x42, 0xae, 0xc1, 0x8d, 0x67, 0xf3, 0x67, 0xe3, 0x4a, 0xdd,
        0x65, 0xd5, 0x65, 0xc5, 0x63, 0xb7, 0x63, 0xa7, 0x91, 0x0e,
        0x13, 0xa7, 0x41, 0x83, 0x13, 0x47, 0x42, 0x1a, 0x92, 0x1b,
        0x17, 0x85, 0x13, 0x29, 0xc1, 0x12, 0x41, 0xd2, 0xc1, 0x53,
        0x15, 0xc4, 0x12, 0x67, 0x94, 0x1b, 0x13, 0xc3, 0x43, 0xc2,
        0x00, 0xb8, 0x14, 0xbb, 0x41, 0x24, 0x93, 0x2b, 0x16, 0x82,
        0x41, 0x50, 0x14, 0x36, 0x40, 0x19, 0x92, 0x0a, 0x42, 0xb2,
        0x14, 0xa3, 0x17, 0x87, 0x93, 0x2a, 0x10, 0xfe, 0x26, 0x0f,
        0x11, 0x90
    };
    writeData(L_GroundArea7, L_GroundArea7_data, sizeof(L_GroundArea7_data));

    // L_GroundArea8
    //
    const uint8_t L_GroundArea8_data[] = {
        0xfd,
        0x20, 0x6f, 0x42, 0x3e, 0xc1, 0x1d, 0xb8, 0x0f, 0x11, 0xee,
        0x4a, 0x5d, 0x60, 0x39, 0x61, 0x28, 0x61, 0x18, 0x33, 0x1a,
        0x9c, 0x0b, 0x38, 0x8c, 0x64, 0x78, 0xb1, 0x3c, 0x31, 0xfc,
        0x45, 0xd4, 0x31, 0xbc, 0x64, 0x88, 0xb7, 0x0c, 0x64, 0xf8,
        0x62, 0xba, 0x43, 0x56, 0x47, 0x3c, 0xe2, 0x2a, 0x64, 0xf8,
        0x48, 0x9d, 0x45, 0x53, 0xbe, 0x0c, 0x64, 0xf8, 0x32, 0xac,
        0x97, 0x0b, 0x42, 0xc3, 0x65, 0x97, 0x00, 0x63, 0x24, 0x4c,
        0x65, 0x37, 0xc2, 0x13, 0x64, 0xf8, 0x39, 0x5c, 0xe4, 0x48,
        0x64, 0xf8, 0x40, 0xb3, 0x41, 0x92, 0x40, 0x83, 0x39, 0x5c,
        0xe4, 0x48, 0x64, 0xf8, 0x40, 0xb3, 0x40, 0xa4, 0x40, 0x93,
        0x40, 0x84, 0x40, 0x73, 0xbf, 0x0c, 0x64, 0xf8, 0x43, 0x43,
        0xbe, 0x0c, 0x64, 0xf8, 0xc8, 0xad, 0x3f, 0xfc, 0x62, 0xe8,
        0x62, 0xd8, 0x32, 0xaf, 0x17, 0x8b, 0x10, 0x6e, 0x26, 0x0f,
        0x11, 0x90
    };
    writeData(L_GroundArea8, L_GroundArea8_data, sizeof(L_GroundArea8_data));

    // L_GroundArea9
    //
    const uint8_t L_GroundArea9_data[] = {
        0xfd,
        0x26, 0xcf, 0xc1, 0x8d, 0x69, 0xf1, 0x69, 0xe1,
        0x0b, 0xc9, 0x02, 0xa3, 0x21, 0x97, 0xf2, 0x08, 0x04, 0xc3,
        0x01, 0xa7, 0x24, 0x43, 0x87, 0x17, 0x62, 0xa8, 0x81, 0x8c,
        0x02, 0xbc, 0xf4, 0x26, 0x22, 0xe3, 0x72, 0xe8, 0x04, 0xd3,
        0x73, 0xa7, 0xf1, 0x39, 0x02, 0xac, 0xfb, 0x77, 0x03, 0xcc,
        0x23, 0xc3, 0x72, 0x5c, 0x21, 0x43, 0x05, 0x33, 0xa1, 0x13,
        0x73, 0xfc, 0x73, 0xa7, 0x22, 0x63, 0x06, 0x53, 0xa0, 0x47,
        0x73, 0x6c, 0x00, 0x57, 0xe4, 0x5c, 0x73, 0xe7, 0x61, 0x39,
        0xe3, 0x27, 0x22, 0xd3, 0x02, 0xc7, 0x03, 0xc3, 0x34, 0x4f,
        0x20, 0x17, 0x84, 0x07, 0x20, 0xf7, 0x40, 0x6e, 0x20, 0x0f,
        0x31, 0x52
    };
    writeData(L_GroundArea9, L_GroundArea9_data, sizeof(L_GroundArea9_data));

    // L_GroundArea10
    //
    const uint8_t L_GroundArea10_data[] = {
        0xfd,
        0xc7, 0x3d, 0x40, 0xad, 0x26, 0x0f,
        0x11, 0x38
    };
    writeData(L_GroundArea10, L_GroundArea10_data, sizeof(L_GroundArea10_data));

    // L_GroundArea11
    //
    const uint8_t L_GroundArea11_data[] = {
        0xfd,
        0x26, 0xbf, 0xc1, 0x7d, 0x65, 0xe3, 0x65, 0xd3, 0xb4, 0x6f,
        0x11, 0xa9, 0xf1, 0x39, 0x11, 0xf9, 0x31, 0xc7, 0x79, 0xc5,
        0x02, 0x8c, 0x21, 0x57, 0x03, 0x47, 0x63, 0x37, 0x09, 0x0d,
        0x62, 0x48, 0x81, 0x2c, 0x91, 0xf9, 0x03, 0xcc, 0x20, 0xc3,
        0x06, 0xb3, 0x20, 0xa3, 0x62, 0x98, 0x34, 0x97, 0x05, 0x0d,
        0x72, 0x38, 0x81, 0x1c, 0x72, 0xc8, 0x02, 0x0d, 0x26, 0x0f,
        0xb1, 0x95
    };
    writeData(L_GroundArea11, L_GroundArea11_data, sizeof(L_GroundArea11_data));

    // L_GroundArea12
    //
    const uint8_t L_GroundArea12_data[] = {
        0xfd,
        0xc7, 0x4d, 0xc2, 0x5a, 0x00, 0xde, 0xc2, 0x52,
        0x4f, 0x43, 0x42, 0x02, 0x02, 0x0d, 0x4f, 0xf4, 0x00, 0x4c,
        0xc1, 0x00
    };
    writeData(L_GroundArea12, L_GroundArea12_data, sizeof(L_GroundArea12_data));

    // L_GroundArea13
    //
    const uint8_t L_GroundArea13_data[] = {
        0xfd,
        0x20, 0x8f, 0x42, 0x5e, 0xc1, 0x3d, 0x01, 0xce, 0x94, 0x28,
        0x16, 0x9b, 0x12, 0x54, 0x14, 0x17, 0xc4, 0x16, 0x15, 0xdf,
        0x12, 0x98, 0x40, 0x82, 0x11, 0x7f, 0x16, 0x7c, 0x12, 0x39,
        0x15, 0x1f, 0xc0, 0x05, 0x11, 0xcf, 0x15, 0xcc, 0x15, 0x9f,
        0x12, 0x47, 0x11, 0x1f, 0x98, 0x1c, 0x14, 0xa3, 0x40, 0x96,
        0x12, 0x87, 0x12, 0x61, 0x42, 0x60, 0x42, 0x34, 0x12, 0x35,
        0x94, 0x1b, 0x40, 0x91, 0x14, 0x8f, 0x12, 0x36, 0x11, 0x1f,
        0x17, 0x1c, 0xc0, 0x05, 0x12, 0xc7, 0x00, 0xb0, 0x14, 0x73,
        0x42, 0x69, 0x16, 0x4a, 0x92, 0x02, 0x44, 0x86, 0x16, 0x77,
        0x42, 0x42, 0x14, 0x33, 0x94, 0x0b, 0x10, 0xee, 0x26, 0x0f,
        0x51, 0x90
    };
    writeData(L_GroundArea13, L_GroundArea13_data, sizeof(L_GroundArea13_data));

    // L_GroundArea14
    //
    const uint8_t L_GroundArea14_data[] = {
        0xfd,
        0x20, 0xcf, 0x42, 0x9e, 0xc1, 0x7d, 0x01, 0xfe,
        0x12, 0xc3, 0x41, 0xa1, 0xc1, 0x15, 0x4a, 0x9d, 0x13, 0x77,
        0x13, 0x4b, 0x12, 0x43, 0x15, 0x2f, 0xc1, 0x03, 0x12, 0xff,
        0x13, 0xfc, 0x12, 0xbb, 0x0b, 0x49, 0x94, 0x1b, 0x14, 0xb7,
        0x49, 0x8d, 0x12, 0x7b, 0x43, 0x46, 0x93, 0x1b, 0x12, 0xdb,
        0x12, 0xa6, 0x14, 0x58, 0x12, 0x51, 0x42, 0x50, 0x95, 0x2f,
        0x11, 0xff, 0x13, 0xfc, 0x15, 0xbf, 0x41, 0x93, 0x11, 0x7f,
        0x14, 0x7c, 0x94, 0x17, 0x00, 0x71, 0x93, 0x19, 0x46, 0xb2,
        0x12, 0xbb, 0x0b, 0x69, 0x92, 0x5b, 0x13, 0xf7, 0x41, 0xc0,
        0x12, 0x8b, 0x12, 0x57, 0x92, 0x2b, 0x10, 0xfe, 0x26, 0x0f,
        0x11, 0x97
    };
    writeData(L_GroundArea14, L_GroundArea14_data, sizeof(L_GroundArea14_data));

    // L_GroundArea15
    //
    const uint8_t L_GroundArea15_data[] = {
        0xfd,
        0xa6, 0x0f,
        0x41, 0xad, 0x4a, 0x8d, 0x67, 0x13, 0xe7, 0x03, 0x01, 0xec,
        0x34, 0x9f, 0x82, 0x4c, 0x21, 0xae, 0x22, 0x89, 0x07, 0x87,
        0x20, 0x77, 0x21, 0x55, 0xa0, 0x4e, 0x35, 0xff, 0x00, 0x8c,
        0x01, 0x36, 0x24, 0x2a, 0x80, 0x26, 0x06, 0xfc, 0x21, 0xf6,
        0x34, 0xaf, 0x02, 0x17, 0x82, 0x13, 0x42, 0x96, 0xf2, 0x68,
        0x02, 0xdc, 0x22, 0xc8, 0x03, 0xa6, 0x22, 0xa4, 0x66, 0x94,
        0x65, 0x85, 0x64, 0x76, 0x61, 0x58, 0xe0, 0x49, 0x41, 0xc5,
        0x02, 0xac, 0x63, 0x97, 0xb3, 0x5f, 0x42, 0xe7, 0x81, 0x9c,
        0x07, 0xb7, 0x21, 0x97, 0x01, 0x7c, 0x20, 0x53, 0x21, 0x4e,
        0x04, 0x43, 0x32, 0x37, 0xb3, 0x08, 0x20, 0xee, 0x34, 0xd9,
        0x35, 0xaa, 0x01, 0x4c, 0xf1, 0x0c, 0x44, 0x6e, 0x20, 0x0f,
        0x21, 0x52
    };
    writeData(L_GroundArea15, L_GroundArea15_data, sizeof(L_GroundArea15_data));

    // L_GroundArea16
    //
    const uint8_t L_GroundArea16_data[] = {
        0xfd,
        0xc5, 0x6d, 0x6a, 0xf0, 0x6a, 0xe0,
        0x7a, 0xa8, 0x7a, 0x68, 0x7a, 0x28, 0xbb, 0x02, 0x38, 0x8f,
        0xc1, 0x37, 0x16, 0xf8, 0x44, 0xe1, 0x14, 0xe2, 0x42, 0xa4,
        0x12, 0xa5, 0x14, 0x69, 0x42, 0x62, 0x12, 0x63, 0x12, 0x29,
        0x42, 0x02, 0x92, 0x03, 0x42, 0xc6, 0x12, 0xc7, 0x00, 0x4c,
        0x51, 0x10
    };
    writeData(L_GroundArea16, L_GroundArea16_data, sizeof(L_GroundArea16_data));

    // L_GroundArea17
    //
    const uint8_t L_GroundArea17_data[] = {
        0xfd,
        0x26, 0xcf, 0xc1, 0x8d,
        0x67, 0xf3, 0x67, 0xe3, 0x00, 0xdc, 0x65, 0xc5, 0x00, 0xbc,
        0x63, 0xa7, 0x00, 0x9c, 0x61, 0x89, 0x00, 0x7c, 0xf1, 0x39,
        0xf2, 0x88, 0x41, 0x16, 0x83, 0x0c, 0x41, 0xc6, 0x04, 0xac,
        0xe1, 0x39, 0x61, 0xf9, 0x40, 0x86, 0x02, 0x7c, 0x40, 0x36,
        0x82, 0x2c, 0x41, 0xb6, 0x35, 0x3f, 0x11, 0x0d, 0x74, 0x66,
        0x01, 0x4c, 0x73, 0x27, 0x81, 0x0c, 0x72, 0xe8, 0x80, 0xdc,
        0x41, 0xf6, 0x05, 0xdc, 0xe1, 0x29, 0x00, 0x9c, 0x00, 0x7c,
        0x80, 0x5c, 0x24, 0xb6, 0x06, 0xa6, 0x21, 0x86, 0x00, 0x3c,
        0x80, 0x0c, 0x00, 0xec, 0x00, 0xbc, 0x00, 0x9c, 0xe3, 0x37,
        0x22, 0xf3, 0x07, 0xe3, 0x02, 0xe7, 0x23, 0xa3, 0xe3, 0x97,
        0xf2, 0xc8, 0xf1, 0x39, 0x41, 0xd2, 0x7b, 0x87, 0xc0, 0x26,
        0x73, 0xe7, 0x40, 0x96, 0x72, 0x28, 0x83, 0x06, 0x73, 0xc7,
        0xc0, 0x06, 0x00, 0x9c, 0x00, 0x6c, 0x00, 0x3c, 0x80, 0x0c,
        0x00, 0xec, 0x73, 0x37, 0x02, 0x0d, 0x40, 0x6e, 0x20, 0x0f,
        0x31, 0x92
    };
    writeData(L_GroundArea17, L_GroundArea17_data, sizeof(L_GroundArea17_data));

    // L_GroundArea18
    //
    const uint8_t L_GroundArea18_data[] = {
        0xfd,
        0x26, 0xcf,
        0xc1, 0x8d, 0x67, 0xf3, 0x67, 0xe3, 0x66, 0xd4, 0x00, 0xcc,
        0x64, 0xb6, 0x63, 0xa7, 0x00, 0x9c, 0xb1, 0x7f, 0x01, 0xfc,
        0x71, 0xd9, 0x23, 0xc3, 0x41, 0xc2, 0x02, 0xac, 0x84, 0x87,
        0x24, 0x93, 0x22, 0x37, 0x86, 0x0c, 0x04, 0xe9, 0x07, 0xd9,
        0xe2, 0x18, 0x01, 0xfc, 0x06, 0xd3, 0x27, 0x67, 0x26, 0x63,
        0xf1, 0x39, 0x91, 0xb9, 0x03, 0xcc, 0x41, 0x9a, 0x22, 0x96,
        0x41, 0x62, 0x21, 0x63, 0x05, 0x53, 0x82, 0x47, 0x74, 0xec,
        0x65, 0x65, 0x65, 0x55, 0x64, 0x46, 0x81, 0x2c, 0x33, 0xef,
        0x7a, 0x78, 0x61, 0x19, 0xe3, 0x07, 0x33, 0xcf, 0x84, 0x23,
        0x25, 0xd7, 0x42, 0xd6, 0x24, 0xd3, 0x02, 0xac, 0x0b, 0x99,
        0x42, 0x52, 0x11, 0x15, 0xb2, 0x07, 0x33, 0xcf, 0x26, 0x0f,
        0xb1, 0x55
    };
    writeData(L_GroundArea18, L_GroundArea18_data, sizeof(L_GroundArea18_data));

    // L_GroundArea19
    //
    const uint8_t L_GroundArea19_data[] = {
        0xfd,
        0x26, 0xcf, 0xc1, 0x8d, 0x67, 0xf3, 0x67, 0xe3,
        0x01, 0xcc, 0x64, 0xb6, 0x00, 0xac, 0xb2, 0x7f, 0x10, 0xfa,
        0x11, 0xf8, 0x34, 0x6f, 0x82, 0x0c, 0x11, 0xf9, 0x00, 0xec,
        0xf1, 0x39, 0x7b, 0xc7, 0x05, 0x4c, 0x00, 0x2c, 0x80, 0x0c,
        0x71, 0xe9, 0x00, 0xac, 0xf1, 0x39, 0x12, 0xd8, 0x07, 0x87,
        0x60, 0x77, 0x10, 0x76, 0x20, 0x67, 0x90, 0x3a, 0x21, 0xe7,
        0x11, 0x99, 0x04, 0x47, 0xa0, 0x37, 0x10, 0xda, 0x11, 0xd8,
        0x11, 0x59, 0x80, 0x4c, 0x01, 0xec, 0xa1, 0xd7, 0x00, 0xfc,
        0x4a, 0xed, 0x2e, 0xd3, 0x00, 0x8c, 0x00, 0x4c, 0x80, 0x2c,
        0x00, 0xdc, 0x2f, 0xd3, 0x08, 0xc3, 0x0b, 0xc9, 0x20, 0xb3,
        0x80, 0x4c, 0x73, 0xdc, 0x67, 0x93, 0x67, 0x83, 0x66, 0x74,
        0x65, 0x65, 0x00, 0x5c, 0xb3, 0x1f, 0x00, 0xfc, 0x26, 0x0f,
        0xb1, 0x50
    };
    writeData(L_GroundArea19, L_GroundArea19_data, sizeof(L_GroundArea19_data));

    // L_GroundArea20
    //
    const uint8_t L_GroundArea20_data[] = {
        0xfd,
        0x26, 0x7f, 0xc1, 0x3d, 0xb8, 0x2f,
        0x35, 0x9f, 0x21, 0x94, 0x00, 0x8c, 0x0b, 0x79, 0x04, 0x70,
        0x21, 0x56, 0x10, 0x2a, 0x91, 0x28, 0x62, 0xd8, 0x24, 0x67,
        0x24, 0x63, 0xf1, 0x09, 0x11, 0xa9, 0xf1, 0x39, 0x72, 0xd8,
        0x91, 0x89, 0x7a, 0xd8, 0x03, 0xd3, 0x26, 0x27, 0xa6, 0x23,
        0x72, 0xc8, 0x01, 0x9c, 0x11, 0x49, 0x20, 0x27, 0x07, 0x17,
        0x30, 0x07, 0x91, 0x05, 0x21, 0xe7, 0x10, 0x8a, 0x91, 0x88,
        0x12, 0xe8, 0x73, 0x7c, 0x91, 0x49, 0x10, 0xca, 0x11, 0xc8,
        0x21, 0xc3, 0x04, 0xb3, 0x91, 0x39, 0x45, 0x6e, 0x20, 0x0f,
        0xb1, 0x52
    };
    writeData(L_GroundArea20, L_GroundArea20_data, sizeof(L_GroundArea20_data));

    // L_GroundArea21
    //
    const uint8_t L_GroundArea21_data[] = {
        0xfd,
        0xc7, 0x4d, 0x42, 0x59, 0x80, 0x2e, 0x20, 0xf4, 0x20, 0xd4,
        0x20, 0xb4, 0x20, 0x94, 0x20, 0x74, 0x49, 0x73, 0xa1, 0x34,
        0x20, 0xd6, 0x20, 0xd5, 0x46, 0x53, 0x20, 0x36, 0xa0, 0x35,
        0x4f, 0x24, 0x20, 0x06, 0x02, 0x0d, 0x4f, 0xf4, 0x00, 0x4c,
        0xc1, 0x06
    };
    writeData(L_GroundArea21, L_GroundArea21_data, sizeof(L_GroundArea21_data));

    // L_GroundArea22
    //
    const uint8_t L_GroundArea22_data[] = {
        0xfd,
        0x26, 0x5f, 0xc1, 0x1d, 0x38, 0x0f, 0x0c, 0x0d,
        0x72, 0x98, 0x43, 0x84, 0x0a, 0x0d, 0x81, 0x0c, 0x61, 0xe9,
        0x50, 0xe4, 0x01, 0xbc, 0xb1, 0x8e, 0xb1, 0x4e, 0x81, 0x0c,
        0x61, 0xf9, 0x07, 0xd7, 0x06, 0xd3, 0xe1, 0xb9, 0x62, 0xc8,
        0x00, 0xc4, 0x42, 0x77, 0x60, 0x1a, 0x03, 0x0d, 0x26, 0x0f,
        0x31, 0x96
    };
    writeData(L_GroundArea22, L_GroundArea22_data, sizeof(L_GroundArea22_data));

    // L_UndergroundArea1
    //
    const uint8_t L_UndergroundArea1_data[] = {
        0xfd,
        0xc5, 0x6d, 0x0f, 0xde, 0x01, 0xae, 0x7a, 0xa8, 0x7a, 0x68,
        0x7a, 0x28, 0x47, 0x2d, 0x82, 0x0e, 0x0f, 0x9e, 0x47, 0x6f,
        0x06, 0x0e, 0xd2, 0x08, 0x01, 0xfe, 0x00, 0x8e, 0x04, 0x66,
        0x24, 0x16, 0x81, 0x0e, 0x00, 0x9e, 0x63, 0x97, 0xb3, 0x5f,
        0x01, 0xcc, 0x52, 0xb8, 0x52, 0xa8, 0x01, 0x8c, 0xf1, 0x39,
        0x73, 0xd7, 0xfa, 0x78, 0x51, 0x95, 0x08, 0x90, 0x24, 0x46,
        0x24, 0x45, 0x45, 0x43, 0x82, 0x0c, 0x02, 0xfe, 0x23, 0xc7,
        0x03, 0xbe, 0x50, 0x97, 0x07, 0x96, 0x52, 0x93, 0x54, 0x83,
        0x02, 0x5e, 0x04, 0x56, 0x21, 0x47, 0x40, 0x46, 0x54, 0x33,
        0x83, 0x1e, 0x02, 0xfe, 0x05, 0xde, 0x23, 0xa7, 0x43, 0xa6,
        0x03, 0x9e, 0x02, 0x7e, 0x52, 0x77, 0x52, 0x67, 0x03, 0x5e,
        0x8d, 0x3e, 0x51, 0xe6, 0x06, 0xe5, 0x20, 0xd7, 0x40, 0xd6,
        0x52, 0xc5, 0x21, 0xa5, 0x43, 0x93, 0x52, 0x95, 0x50, 0x87,
        0x40, 0x86, 0x52, 0x75, 0xe1, 0x19, 0x62, 0xf8, 0x07, 0xd6,
        0x62, 0xb8, 0x63, 0x97, 0x63, 0x77, 0x62, 0x58, 0x61, 0x39,
        0xe0, 0x1a, 0x73, 0xbc, 0x00, 0xa7, 0x02, 0x5e, 0x01, 0x0e,
        0x0f, 0x48
    };
    writeData(L_UndergroundArea1, L_UndergroundArea1_data, sizeof(L_UndergroundArea1_data));

    // L_UndergroundArea2
    //
    const uint8_t L_UndergroundArea2_data[] = {
        0xfd,
        0xc5, 0x6d, 0x0f, 0xde, 0x01, 0xae, 0x7a, 0x68,
        0x82, 0x0e, 0xc7, 0x4d, 0x0f, 0xee, 0x47, 0xbf, 0x06, 0x8e,
        0x01, 0x7c, 0xf6, 0x44, 0x02, 0xfe, 0x33, 0xdf, 0x29, 0x27,
        0x49, 0x26, 0x04, 0x17, 0xd1, 0x04, 0x04, 0xfe, 0x00, 0xae,
        0x32, 0x8f, 0x81, 0x0c, 0x73, 0xe7, 0x72, 0xa8, 0x71, 0x39,
        0x82, 0x0e, 0x0a, 0xfe, 0x00, 0xae, 0x20, 0x93, 0x04, 0x83,
        0x23, 0x77, 0x20, 0x73, 0x02, 0x6e, 0x00, 0x0e, 0xe2, 0x08,
        0x01, 0xfe, 0x62, 0xf8, 0x01, 0xdc, 0x73, 0xb7, 0x01, 0x9c,
        0x62, 0x88, 0xe1, 0x79, 0x72, 0x98, 0x20, 0x76, 0x7a, 0x48,
        0x06, 0x17, 0xa0, 0x07, 0x76, 0xe4, 0x07, 0xd7, 0x20, 0xc7,
        0x72, 0x88, 0x02, 0x2e, 0x02, 0x27, 0x02, 0x16, 0x21, 0x13,
        0x02, 0x05, 0x85, 0x03, 0x02, 0xf6, 0x01, 0xee, 0x00, 0x8e,
        0x01, 0x87, 0x00, 0x77, 0x01, 0x67, 0x71, 0x2c, 0xe1, 0x2c,
        0x02, 0xfe, 0x87, 0xb2, 0x0b, 0xde, 0x04, 0xc7, 0x42, 0xba,
        0x24, 0x69, 0x24, 0x68, 0x25, 0x67, 0x04, 0x4e, 0x52, 0x41,
        0x82, 0x2c, 0x01, 0xfc, 0x01, 0xbc, 0x02, 0x5e, 0x01, 0x0e,
        0x0f, 0x48
    };
    writeData(L_UndergroundArea2, L_UndergroundArea2_data, sizeof(L_UndergroundArea2_data));

    // L_UndergroundArea3
    //
    const uint8_t L_UndergroundArea3_data[] = {
        0xfd,
        0xc7, 0x4d, 0x07, 0xe5, 0x4a, 0xdf, 0x21, 0xb4,
        0x01, 0xae, 0x54, 0xa1, 0x24, 0x55, 0x44, 0x54, 0x44, 0x53,
        0x51, 0x44, 0x02, 0x3e, 0x5a, 0x00, 0x81, 0x0e, 0xc7, 0x4d,
        0x4a, 0xdf, 0x04, 0xd7, 0x52, 0xa7, 0x25, 0x47, 0x49, 0x3a,
        0x52, 0x37, 0x47, 0x36, 0x02, 0x2e, 0x5a, 0x00, 0x81, 0x0e,
        0xc7, 0x4d, 0x4a, 0xdf, 0x53, 0xc3, 0x50, 0xb7, 0x40, 0xb6,
        0x51, 0xb3, 0x50, 0xa6, 0x40, 0xa5, 0x50, 0xa3, 0x50, 0x95,
        0x40, 0x94, 0x51, 0x83, 0x51, 0x73, 0x41, 0x71, 0x50, 0x65,
        0x40, 0x64, 0x43, 0x62, 0x50, 0x56, 0x40, 0x55, 0x04, 0x53,
        0x50, 0x47, 0x40, 0x46, 0x51, 0x43, 0x53, 0x33, 0x5a, 0x00,
        0x81, 0x0e, 0xc7, 0x4d, 0x4a, 0xdf, 0x0f, 0xce, 0x07, 0xc7,
        0x47, 0x46, 0x48, 0x3a, 0x28, 0x37, 0x04, 0x2e, 0x5a, 0x00,
        0x81, 0x0e, 0xc7, 0x4d, 0x4a, 0xdf, 0x01, 0xae, 0x44, 0x53,
        0x46, 0x47, 0x46, 0x45, 0x06, 0x3e, 0x5a, 0x00, 0x01, 0x0e,
        0x01, 0x48
    };
    writeData(L_UndergroundArea3, L_UndergroundArea3_data, sizeof(L_UndergroundArea3_data));

    // L_WaterArea1
    //
    const uint8_t L_WaterArea1_data[] = {
        0xfd,
        0x47, 0x7d, 0xca, 0x7d, 0x0f, 0xee, 0x09, 0xe5, 0x0b, 0xce,
        0x61, 0xc9, 0x60, 0xba, 0x33, 0x64, 0x43, 0x63, 0x33, 0x27,
        0xc3, 0x26, 0x51, 0xe9, 0x53, 0xb3, 0x01, 0xac, 0x41, 0x8a,
        0x53, 0x63, 0x35, 0x62, 0x01, 0x6c, 0x01, 0x1e, 0xc9, 0x0d,
        0x07, 0xfe, 0x03, 0xcc, 0x01, 0xbe, 0x07, 0x9e, 0x49, 0x65,
        0x03, 0x6c, 0xd3, 0x47, 0x51, 0xf2, 0x52, 0xc8, 0x34, 0xb4,
        0x01, 0x41
    };
    writeData(L_WaterArea1, L_WaterArea1_data, sizeof(L_WaterArea1_data));

    // L_WaterArea2
    //
    const uint8_t L_WaterArea2_data[] = {
        0xfd,
        0x47, 0x7d, 0xca, 0x0d, 0x0f, 0xde, 0x09, 0xd5, 0x0b, 0xbe,
        0x62, 0xb8, 0x61, 0xa9, 0x30, 0x9a, 0x33, 0x47, 0xb3, 0x43,
        0x51, 0xd1, 0x34, 0xc7, 0x34, 0xc3, 0x67, 0x43, 0xb1, 0x23,
        0x42, 0xfa, 0x42, 0xf7, 0x06, 0xdc, 0x31, 0xd3, 0x67, 0xc3,
        0x52, 0x58, 0xd1, 0x39, 0x63, 0xd7, 0x61, 0xc9, 0x40, 0x99,
        0x42, 0x6a, 0x40, 0x59, 0x37, 0x42, 0x08, 0x3c, 0x62, 0x30,
        0x61, 0x29, 0xe3, 0x17, 0x53, 0x87, 0x31, 0x36, 0xc2, 0x14,
        0x31, 0x67, 0x53, 0x63, 0x42, 0x59, 0xc9, 0x0d, 0x52, 0x98,
        0x51, 0x31, 0x32, 0x23, 0xc9, 0x0d, 0x01, 0xfe, 0x07, 0xde,
        0x62, 0x88, 0x64, 0x76, 0x42, 0x38, 0x04, 0x2c, 0x64, 0x16,
        0xe2, 0x08, 0xd3, 0x27, 0x31, 0xa7, 0x51, 0xa5, 0x42, 0x4a,
        0xd4, 0x16, 0x42, 0xb3, 0xb2, 0x27, 0x41, 0xea, 0x52, 0xb8,
        0x01, 0x41
    };
    writeData(L_WaterArea2, L_WaterArea2_data, sizeof(L_WaterArea2_data));

    // L_WaterArea3
    //
    const uint8_t L_WaterArea3_data[] = {
        0xff,
        0xfd,
        0x47, 0xed, 0x0f, 0x4e,
        0x09, 0x45, 0x0b, 0x2e, 0x04, 0x0d, 0x02, 0x9e, 0x88, 0x6e,
        0x82, 0x1e, 0x0b, 0xae, 0x07, 0x5e, 0x73, 0x39, 0x01, 0x1e,
        0x0f, 0x49
    };
    writeData(L_WaterArea3, L_WaterArea3_data, sizeof(L_WaterArea3_data));

    // X_SubtracterData
    //
    const uint8_t X_SubtracterData_data[] = {
        0x10, 0x00
    };
    writeData(X_SubtracterData, X_SubtracterData_data, sizeof(X_SubtracterData_data));

    // OffscrJoypadBitsData
    //
    const uint8_t OffscrJoypadBitsData_data[] = {
        0x02, 0x01
    };
    writeData(OffscrJoypadBitsData, OffscrJoypadBitsData_data, sizeof(OffscrJoypadBitsData_data));

    // Hidden1UpCoinAmts
    //
    const uint8_t Hidden1UpCoinAmts_data[] = {
        0x63, 0x23, 0x18, 0x17, 0x1b, 0x16, 0x23, 0x15
    };
    writeData(Hidden1UpCoinAmts, Hidden1UpCoinAmts_data, sizeof(Hidden1UpCoinAmts_data));

    // MoveSubs
    //
    const uint8_t MoveSubs_data[] = {
        
    };
    writeData(MoveSubs, MoveSubs_data, sizeof(MoveSubs_data));

    // ClimbAdderLow
    //
    const uint8_t ClimbAdderLow_data[] = {
        0xf2, 0xfc, 0x04, 0x0e
    };
    writeData(ClimbAdderLow, ClimbAdderLow_data, sizeof(ClimbAdderLow_data));

    // ClimbAdderHigh
    //
    const uint8_t ClimbAdderHigh_data[] = {
        0xff, 0xff, 0x00, 0x00
    };
    writeData(ClimbAdderHigh, ClimbAdderHigh_data, sizeof(ClimbAdderHigh_data));

    // JumpMForceData
    //
    const uint8_t JumpMForceData_data[] = {
        0x04, 0x0d, 0x28, 0x28, 0x1e, 0x20, 0x20
    };
    writeData(JumpMForceData, JumpMForceData_data, sizeof(JumpMForceData_data));

    // FallMForceData
    //
    const uint8_t FallMForceData_data[] = {
        0x09, 0x0a, 0x90, 0x90, 0x60, 0x70, 0x70
    };
    writeData(FallMForceData, FallMForceData_data, sizeof(FallMForceData_data));

    // PlayerYSpdData
    //
    const uint8_t PlayerYSpdData_data[] = {
        0xff, 0xfe, 0xfb, 0xfb, 0xfc, 0xfc, 0xfc
    };
    writeData(PlayerYSpdData, PlayerYSpdData_data, sizeof(PlayerYSpdData_data));

    // InitMForceData
    //
    const uint8_t InitMForceData_data[] = {
        0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    writeData(InitMForceData, InitMForceData_data, sizeof(InitMForceData_data));

    // MaxLeftXSpdData
    //
    const uint8_t MaxLeftXSpdData_data[] = {
        0xf0, 0xe8, 0xd8
    };
    writeData(MaxLeftXSpdData, MaxLeftXSpdData_data, sizeof(MaxLeftXSpdData_data));

    // MaxRightXSpdData
    //
    const uint8_t MaxRightXSpdData_data[] = {
        0x0c, // used for pipe intros
        0x10, 0x18, 0x28
    };
    writeData(MaxRightXSpdData, MaxRightXSpdData_data, sizeof(MaxRightXSpdData_data));

    // FrictionData
    //
    const uint8_t FrictionData_data[] = {
        0xd0, 0x98, 0xe4
    };
    writeData(FrictionData, FrictionData_data, sizeof(FrictionData_data));

    // Climb_Y_SpeedData
    //
    const uint8_t Climb_Y_SpeedData_data[] = {
        0x01, 0xff, 0x00
    };
    writeData(Climb_Y_SpeedData, Climb_Y_SpeedData_data, sizeof(Climb_Y_SpeedData_data));

    // Climb_Y_MForceData
    //
    const uint8_t Climb_Y_MForceData_data[] = {
        0xff, 0x20, 0x00
    };
    writeData(Climb_Y_MForceData, Climb_Y_MForceData_data, sizeof(Climb_Y_MForceData_data));

    // PlayerAnimTmrData
    //
    const uint8_t PlayerAnimTmrData_data[] = {
        0x07, 0x04, 0x02
    };
    writeData(PlayerAnimTmrData, PlayerAnimTmrData_data, sizeof(PlayerAnimTmrData_data));

    // FireballXSpdData
    //
    const uint8_t FireballXSpdData_data[] = {
        0xc0, 0x40
    };
    writeData(FireballXSpdData, FireballXSpdData_data, sizeof(FireballXSpdData_data));

    // Bubble_MForceData
    //
    const uint8_t Bubble_MForceData_data[] = {
        0x50, 0xff
    };
    writeData(Bubble_MForceData, Bubble_MForceData_data, sizeof(Bubble_MForceData_data));

    // BubbleTimerData
    //
    const uint8_t BubbleTimerData_data[] = {
        0x20, 0x40
    };
    writeData(BubbleTimerData, BubbleTimerData_data, sizeof(BubbleTimerData_data));

    // FlagpoleScoreMods
    //
    const uint8_t FlagpoleScoreMods_data[] = {
        0x01, 0x04, 0x08, 0x02, 0x05
    };
    writeData(FlagpoleScoreMods, FlagpoleScoreMods_data, sizeof(FlagpoleScoreMods_data));

    // FlagpoleScoreDigits
    //
    const uint8_t FlagpoleScoreDigits_data[] = {
        0x04, 0x04, 0x04, 0x03, 0x03
    };
    writeData(FlagpoleScoreDigits, FlagpoleScoreDigits_data, sizeof(FlagpoleScoreDigits_data));

    // Jumpspring_Y_PosData
    //
    const uint8_t Jumpspring_Y_PosData_data[] = {
        0x00, 0x08, 0x10, 0x08
    };
    writeData(Jumpspring_Y_PosData, Jumpspring_Y_PosData_data, sizeof(Jumpspring_Y_PosData_data));

    // VineHeightData
    //
    const uint8_t VineHeightData_data[] = {
        0x60, 0x30
    };
    writeData(VineHeightData, VineHeightData_data, sizeof(VineHeightData_data));

    // CannonBitmasks
    //
    const uint8_t CannonBitmasks_data[] = {
        BOOST_BINARY(00000111), BOOST_BINARY(00001111)
    };
    writeData(CannonBitmasks, CannonBitmasks_data, sizeof(CannonBitmasks_data));

    // BulletBillXSpdData
    //
    const uint8_t BulletBillXSpdData_data[] = {
        0xe8, 0x18
    };
    writeData(BulletBillXSpdData, BulletBillXSpdData_data, sizeof(BulletBillXSpdData_data));

    // HammerEnemyOfsData
    //
    const uint8_t HammerEnemyOfsData_data[] = {
        0x06, 0x06, 0x06,
        0x05, 0x05, 0x05, 0x04, 0x04, 0x04
    };
    writeData(HammerEnemyOfsData, HammerEnemyOfsData_data, sizeof(HammerEnemyOfsData_data));

    // HammerXSpdData
    //
    const uint8_t HammerXSpdData_data[] = {
        0xf0, 0x10
    };
    writeData(HammerXSpdData, HammerXSpdData_data, sizeof(HammerXSpdData_data));

    // CoinTallyOffsets
    //
    const uint8_t CoinTallyOffsets_data[] = {
        0x1d, 0x17
    };
    writeData(CoinTallyOffsets, CoinTallyOffsets_data, sizeof(CoinTallyOffsets_data));

    // ScoreOffsets
    //
    const uint8_t ScoreOffsets_data[] = {
        0x11, 0x0b
    };
    writeData(ScoreOffsets, ScoreOffsets_data, sizeof(ScoreOffsets_data));

    // StatusBarNybbles
    //
    const uint8_t StatusBarNybbles_data[] = {
        0x13, 0x02
    };
    writeData(StatusBarNybbles, StatusBarNybbles_data, sizeof(StatusBarNybbles_data));

    // BlockYPosAdderData
    //
    const uint8_t BlockYPosAdderData_data[] = {
        0x12, 0x04
    };
    writeData(BlockYPosAdderData, BlockYPosAdderData_data, sizeof(BlockYPosAdderData_data));

    // BlockCode
    //
    const uint8_t BlockCode_data[] = {
        
    };
    writeData(BlockCode, BlockCode_data, sizeof(BlockCode_data));

    // BrickQBlockMetatiles
    //
    const uint8_t BrickQBlockMetatiles_data[] = {
        0x5e, 0x5d, 0x5c, 0x5b, 0x5a, // used by other level types
        0x59, 0x58, 0x57, 0x56, 0x55, // used by ground level types
        0x60, 0x5f, 0xc0, 0xc1 // used by question blocks
    };
    writeData(BrickQBlockMetatiles, BrickQBlockMetatiles_data, sizeof(BrickQBlockMetatiles_data));

    // MaxSpdBlockData
    //
    const uint8_t MaxSpdBlockData_data[] = {
        0x08, 0x06
    };
    writeData(MaxSpdBlockData, MaxSpdBlockData_data, sizeof(MaxSpdBlockData_data));

    // LoopCmdWorldNumber
    //
    const uint8_t LoopCmdWorldNumber_data[] = {
        0x07, 0x07, 0x07, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x03, 0x03
    };
    writeData(LoopCmdWorldNumber, LoopCmdWorldNumber_data, sizeof(LoopCmdWorldNumber_data));

    // LoopCmdPageNumber
    //
    const uint8_t LoopCmdPageNumber_data[] = {
        0x10, 0x0b, 0x06, 0x0a, 0x09, 0x08, 0x06, 0x05, 0x04, 0x09, 0x05
    };
    writeData(LoopCmdPageNumber, LoopCmdPageNumber_data, sizeof(LoopCmdPageNumber_data));

    // LoopCmdYPosition
    //
    const uint8_t LoopCmdYPosition_data[] = {
        0xf0, 0xf0, 0xf0, 0x40, 0x80, 0x40, 0x40, 0x80, 0xb0, 0xb0, 0x40
    };
    writeData(LoopCmdYPosition, LoopCmdYPosition_data, sizeof(LoopCmdYPosition_data));

    // NormalXSpdData
    //
    const uint8_t NormalXSpdData_data[] = {
        0xf4, 0xf8
    };
    writeData(NormalXSpdData, NormalXSpdData_data, sizeof(NormalXSpdData_data));

    // HBroWalkingTimerData
    //
    const uint8_t HBroWalkingTimerData_data[] = {
        0x50, 0x80
    };
    writeData(HBroWalkingTimerData, HBroWalkingTimerData_data, sizeof(HBroWalkingTimerData_data));

    // PRDiffAdjustData
    //
    const uint8_t PRDiffAdjustData_data[] = {
        0x16, 0x15, 0x14, 0x13,
        0x26, 0x24, 0x22, 0x20,
        0x38, 0x32, 0x2c, 0x26
    };
    writeData(PRDiffAdjustData, PRDiffAdjustData_data, sizeof(PRDiffAdjustData_data));

    // FirebarSpinSpdData
    //
    const uint8_t FirebarSpinSpdData_data[] = {
        0x28, 0x38, 0x28, 0x38, 0x28
    };
    writeData(FirebarSpinSpdData, FirebarSpinSpdData_data, sizeof(FirebarSpinSpdData_data));

    // FirebarSpinDirData
    //
    const uint8_t FirebarSpinDirData_data[] = {
        0x00, 0x10, 0x10, 0x00, 0x00
    };
    writeData(FirebarSpinDirData, FirebarSpinDirData_data, sizeof(FirebarSpinDirData_data));

    // FlyCCXPositionData
    //
    const uint8_t FlyCCXPositionData_data[] = {
        0x68, 0x90, 0x40, 0x70,
        0xa0, 0x80, 0x40, 0x20,
        0x70, 0x50, 0x50, 0x30,
        0x80, 0x40, 0x30, 0x80
    };
    writeData(FlyCCXPositionData, FlyCCXPositionData_data, sizeof(FlyCCXPositionData_data));

    // FlyCCXSpeedData
    //
    const uint8_t FlyCCXSpeedData_data[] = {
        0x14, 0x18, 0x22, 0x1e,
        0x0c, 0x10, 0x20, 0x1c,
        0x0e, 0x06, 0x05, 0x0e
    };
    writeData(FlyCCXSpeedData, FlyCCXSpeedData_data, sizeof(FlyCCXSpeedData_data));

    // FlyCCTimerData
    //
    const uint8_t FlyCCTimerData_data[] = {
        0x48, 0x20, 0x60, 0x10
    };
    writeData(FlyCCTimerData, FlyCCTimerData_data, sizeof(FlyCCTimerData_data));

    // FlameYPosData
    //
    const uint8_t FlameYPosData_data[] = {
        0x90, 0x70, 0x80, 0x90
    };
    writeData(FlameYPosData, FlameYPosData_data, sizeof(FlameYPosData_data));

    // FlameYMFAdderData
    //
    const uint8_t FlameYMFAdderData_data[] = {
        0x01, 0xff
    };
    writeData(FlameYMFAdderData, FlameYMFAdderData_data, sizeof(FlameYMFAdderData_data));

    // FireworksXPosData
    //
    const uint8_t FireworksXPosData_data[] = {
        0x20, 0x00, 0x60, 0x60, 0x30, 0x00
    };
    writeData(FireworksXPosData, FireworksXPosData_data, sizeof(FireworksXPosData_data));

    // FireworksYPosData
    //
    const uint8_t FireworksYPosData_data[] = {
        0x30, 0x60, 0x40, 0x70, 0x40, 0x60
    };
    writeData(FireworksYPosData, FireworksYPosData_data, sizeof(FireworksYPosData_data));

    // Bitmasks
    //
    const uint8_t Bitmasks_data[] = {
        BOOST_BINARY(10000000), BOOST_BINARY(01000000), BOOST_BINARY(00100000), BOOST_BINARY(00010000), BOOST_BINARY(00001000), BOOST_BINARY(00000100), BOOST_BINARY(00000010), BOOST_BINARY(00000001)
    };
    writeData(Bitmasks, Bitmasks_data, sizeof(Bitmasks_data));

    // Enemy17YPosData
    //
    const uint8_t Enemy17YPosData_data[] = {
        0x70, 0xa0, 0x60, 0x20, 0x50, 0x90, 0x30, 0x40
    };
    writeData(Enemy17YPosData, Enemy17YPosData_data, sizeof(Enemy17YPosData_data));

    // SwimCC_IDData
    //
    const uint8_t SwimCC_IDData_data[] = {
        0x0b, 0x0a
    };
    writeData(SwimCC_IDData, SwimCC_IDData_data, sizeof(SwimCC_IDData_data));

    // PlatPosDataLow
    //
    const uint8_t PlatPosDataLow_data[] = {
        0xf8, 0x0c, 0x08
    };
    writeData(PlatPosDataLow, PlatPosDataLow_data, sizeof(PlatPosDataLow_data));

    // PlatPosDataHigh
    //
    const uint8_t PlatPosDataHigh_data[] = {
        0xff, 0x00, 0x00
    };
    writeData(PlatPosDataHigh, PlatPosDataHigh_data, sizeof(PlatPosDataHigh_data));

    // JmpEO
    //
    const uint8_t JmpEO_data[] = {
        
    };
    writeData(JmpEO, JmpEO_data, sizeof(JmpEO_data));

    // HammerThrowTmrData
    //
    const uint8_t HammerThrowTmrData_data[] = {
        0x1c, 0x30
    };
    writeData(HammerThrowTmrData, HammerThrowTmrData_data, sizeof(HammerThrowTmrData_data));

    // XSpeedAdderData
    //
    const uint8_t XSpeedAdderData_data[] = {
        0x18, 0x00, 0xe8, 0x00
    };
    writeData(XSpeedAdderData, XSpeedAdderData_data, sizeof(XSpeedAdderData_data));

    // RevivedXSpeed
    //
    const uint8_t RevivedXSpeed_data[] = {
        0xf4, 0x0c, 0xf8, 0x08
    };
    writeData(RevivedXSpeed, RevivedXSpeed_data, sizeof(RevivedXSpeed_data));

    // HammerBroJumpLData
    //
    const uint8_t HammerBroJumpLData_data[] = {
        0x37, 0x20
    };
    writeData(HammerBroJumpLData, HammerBroJumpLData_data, sizeof(HammerBroJumpLData_data));

    // BlooberBitmasks
    //
    const uint8_t BlooberBitmasks_data[] = {
        BOOST_BINARY(00000011), BOOST_BINARY(00111111)
    };
    writeData(BlooberBitmasks, BlooberBitmasks_data, sizeof(BlooberBitmasks_data));

    // SwimCCXMoveData
    //
    const uint8_t SwimCCXMoveData_data[] = {
        0x04, 0x04, // residual data, not used
        0x80, 0x40
    };
    writeData(SwimCCXMoveData, SwimCCXMoveData_data, sizeof(SwimCCXMoveData_data));

    // FirebarPosLookupTbl
    //
    const uint8_t FirebarPosLookupTbl_data[] = {
        0x58, 0x56, 0x51, 0x49, 0x3e, 0x31, 0x22, 0x11, 0x00,
        0x50, 0x4e, 0x4a, 0x42, 0x38, 0x2d, 0x1f, 0x0f, 0x00,
        0x48, 0x46, 0x42, 0x3b, 0x32, 0x28, 0x1b, 0x0e, 0x00,
        0x40, 0x3e, 0x3b, 0x35, 0x2d, 0x24, 0x18, 0x0c, 0x00,
        0x38, 0x37, 0x33, 0x2e, 0x27, 0x1f, 0x15, 0x0b, 0x00,
        0x30, 0x2f, 0x2c, 0x27, 0x21, 0x1b, 0x12, 0x09, 0x00,
        0x28, 0x27, 0x25, 0x21, 0x1c, 0x16, 0x0f, 0x07, 0x00,
        0x20, 0x1f, 0x1d, 0x1a, 0x16, 0x12, 0x0c, 0x06, 0x00,
        0x18, 0x17, 0x16, 0x13, 0x10, 0x0d, 0x09, 0x04, 0x00,
        0x10, 0x0f, 0x0e, 0x0d, 0x0b, 0x09, 0x06, 0x03, 0x00,
        0x08, 0x07, 0x07, 0x06, 0x05, 0x04, 0x03, 0x01, 0x00
    };
    writeData(FirebarPosLookupTbl, FirebarPosLookupTbl_data, sizeof(FirebarPosLookupTbl_data));

    // FirebarMirrorData
    //
    const uint8_t FirebarMirrorData_data[] = {
        0x00, 0x02, 0x03, 0x01
    };
    writeData(FirebarMirrorData, FirebarMirrorData_data, sizeof(FirebarMirrorData_data));

    // FirebarTblOffsets
    //
    const uint8_t FirebarTblOffsets_data[] = {
        0x63, 0x5a, 0x51, 0x48, 0x3f, 0x36,
        0x2d, 0x24, 0x1b, 0x12, 0x09, 0x00
    };
    writeData(FirebarTblOffsets, FirebarTblOffsets_data, sizeof(FirebarTblOffsets_data));

    // FirebarYPos
    //
    const uint8_t FirebarYPos_data[] = {
        0x18, 0x0c
    };
    writeData(FirebarYPos, FirebarYPos_data, sizeof(FirebarYPos_data));

    // PRandomSubtracter
    //
    const uint8_t PRandomSubtracter_data[] = {
        0x00, 0xbd, 0x70, 0xa0, 0xf8
    };
    writeData(PRandomSubtracter, PRandomSubtracter_data, sizeof(PRandomSubtracter_data));

    // FlyCCBPriority
    //
    const uint8_t FlyCCBPriority_data[] = {
        0x00, 0x00, 0x20, 0x20, 0x20
    };
    writeData(FlyCCBPriority, FlyCCBPriority_data, sizeof(FlyCCBPriority_data));

    // LakituDiffAdj
    //
    const uint8_t LakituDiffAdj_data[] = {
        0x40, 0x30, 0x15
    };
    writeData(LakituDiffAdj, LakituDiffAdj_data, sizeof(LakituDiffAdj_data));

    // BridgeCollapseData
    //
    const uint8_t BridgeCollapseData_data[] = {
        0x80, 0x82, 0x84, 0x86, 0x88, 0x8a,
        0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, // bridge
        0x58, // chain
        0x1a // axe
    };
    writeData(BridgeCollapseData, BridgeCollapseData_data, sizeof(BridgeCollapseData_data));

    // PRandomRange
    //
    const uint8_t PRandomRange_data[] = {
        0x31, 0x11, 0x41, 0x21
    };
    writeData(PRandomRange, PRandomRange_data, sizeof(PRandomRange_data));

    // FlameTimerData
    //
    const uint8_t FlameTimerData_data[] = {
        0xbf, 0x40, 0x40, 0xbf, 0xbf, 0xbf, 0x40, 0xbf
    };
    writeData(FlameTimerData, FlameTimerData_data, sizeof(FlameTimerData_data));

    // StarFlagYPosAdder
    //
    const uint8_t StarFlagYPosAdder_data[] = {
        0x08, 0x08, 0x00, 0x00
    };
    writeData(StarFlagYPosAdder, StarFlagYPosAdder_data, sizeof(StarFlagYPosAdder_data));

    // StarFlagXPosAdder
    //
    const uint8_t StarFlagXPosAdder_data[] = {
        0x08, 0x00, 0x08, 0x00
    };
    writeData(StarFlagXPosAdder, StarFlagXPosAdder_data, sizeof(StarFlagXPosAdder_data));

    // StarFlagTileData
    //
    const uint8_t StarFlagTileData_data[] = {
        0x57, 0x56, 0x55, 0x54
    };
    writeData(StarFlagTileData, StarFlagTileData_data, sizeof(StarFlagTileData_data));

    // ExScrnBd
    //
    const uint8_t ExScrnBd_data[] = {
        0xff, 0xff, 0xff,
        
    };
    writeData(ExScrnBd, ExScrnBd_data, sizeof(ExScrnBd_data));

    // BowserIdentities
    //
    const uint8_t BowserIdentities_data[] = {
        Bowser, HammerBro, Bloober, Lakitu, Spiny, BuzzyBeetle, GreenKoopa, Goomba
    };
    writeData(BowserIdentities, BowserIdentities_data, sizeof(BowserIdentities_data));

    // ResidualXSpdData
    //
    const uint8_t ResidualXSpdData_data[] = {
        0xe8, 0x18
    };
    writeData(ResidualXSpdData, ResidualXSpdData_data, sizeof(ResidualXSpdData_data));

    // KickedShellXSpdData
    //
    const uint8_t KickedShellXSpdData_data[] = {
        0xd0, 0x30
    };
    writeData(KickedShellXSpdData, KickedShellXSpdData_data, sizeof(KickedShellXSpdData_data));

    // DemotedKoopaXSpdData
    //
    const uint8_t DemotedKoopaXSpdData_data[] = {
        0xf8, 0x08
    };
    writeData(DemotedKoopaXSpdData, DemotedKoopaXSpdData_data, sizeof(DemotedKoopaXSpdData_data));

    // KickedShellPtsData
    //
    const uint8_t KickedShellPtsData_data[] = {
        0x04, 0x06, 0x0a
    };
    writeData(KickedShellPtsData, KickedShellPtsData_data, sizeof(KickedShellPtsData_data));

    // StompedEnemyPtsData
    //
    const uint8_t StompedEnemyPtsData_data[] = {
        0x06, 0x05, 0x06, 0x02
    };
    writeData(StompedEnemyPtsData, StompedEnemyPtsData_data, sizeof(StompedEnemyPtsData_data));

    // RevivalRateData
    //
    const uint8_t RevivalRateData_data[] = {
        0x0b, 0x10
    };
    writeData(RevivalRateData, RevivalRateData_data, sizeof(RevivalRateData_data));

    // SetBitsMask
    //
    const uint8_t SetBitsMask_data[] = {
        BOOST_BINARY(00000010), BOOST_BINARY(00000100), BOOST_BINARY(00001000), BOOST_BINARY(00010000), BOOST_BINARY(00100000), BOOST_BINARY(01000000), BOOST_BINARY(10000000)
    };
    writeData(SetBitsMask, SetBitsMask_data, sizeof(SetBitsMask_data));

    // ClearBitsMask
    //
    const uint8_t ClearBitsMask_data[] = {
        BOOST_BINARY(11111101), BOOST_BINARY(11111011), BOOST_BINARY(11110111), BOOST_BINARY(11101111), BOOST_BINARY(11011111), BOOST_BINARY(10111111), BOOST_BINARY(01111111)
    };
    writeData(ClearBitsMask, ClearBitsMask_data, sizeof(ClearBitsMask_data));

    // PlayerPosSPlatData
    //
    const uint8_t PlayerPosSPlatData_data[] = {
        0x00, 0x80
    };
    writeData(PlayerPosSPlatData, PlayerPosSPlatData_data, sizeof(PlayerPosSPlatData_data));

    // PlayerBGUpperExtent
    //
    const uint8_t PlayerBGUpperExtent_data[] = {
        0x10, 0x20
    };
    writeData(PlayerBGUpperExtent, PlayerBGUpperExtent_data, sizeof(PlayerBGUpperExtent_data));

    // AreaChangeTimerData
    //
    const uint8_t AreaChangeTimerData_data[] = {
        0x34, 0xa0
    };
    writeData(AreaChangeTimerData, AreaChangeTimerData_data, sizeof(AreaChangeTimerData_data));

    // ClimbXPosAdder
    //
    const uint8_t ClimbXPosAdder_data[] = {
        0x07, 0xf9
    };
    writeData(ClimbXPosAdder, ClimbXPosAdder_data, sizeof(ClimbXPosAdder_data));

    // ClimbPLocAdder
    //
    const uint8_t ClimbPLocAdder_data[] = {
        0x00, 0xff
    };
    writeData(ClimbPLocAdder, ClimbPLocAdder_data, sizeof(ClimbPLocAdder_data));

    // FlagpoleYPosData
    //
    const uint8_t FlagpoleYPosData_data[] = {
        0x90, 0x68, 0x50, 0x22, 0x18
    };
    writeData(FlagpoleYPosData, FlagpoleYPosData_data, sizeof(FlagpoleYPosData_data));

    // SolidMTileUpperExt
    //
    const uint8_t SolidMTileUpperExt_data[] = {
        0xc4, 0x88, 0x61, 0x10
    };
    writeData(SolidMTileUpperExt, SolidMTileUpperExt_data, sizeof(SolidMTileUpperExt_data));

    // ClimbMTileUpperExt
    //
    const uint8_t ClimbMTileUpperExt_data[] = {
        0xc6, 0x8a, 0x6d, 0x24
    };
    writeData(ClimbMTileUpperExt, ClimbMTileUpperExt_data, sizeof(ClimbMTileUpperExt_data));

    // EnemyBGCStateData
    //
    const uint8_t EnemyBGCStateData_data[] = {
        0x05, 0x02, 0x02, 0x02, 0x01, 0x01
    };
    writeData(EnemyBGCStateData, EnemyBGCStateData_data, sizeof(EnemyBGCStateData_data));

    // EnemyBGCXSpdData
    //
    const uint8_t EnemyBGCXSpdData_data[] = {
        0xf0, 0x10
    };
    writeData(EnemyBGCXSpdData, EnemyBGCXSpdData_data, sizeof(EnemyBGCXSpdData_data));

    // BoundBoxCtrlData
    //
    const uint8_t BoundBoxCtrlData_data[] = {
        0x1c, 0x0c, 0x04, 0x04,
        0x15, 0x10, 0x02, 0x00,
        0x14, 0x0d, 0x0e, 0x03,
        0x08, 0x0a, 0x04, 0x06,
        0x08, 0x08, 0x00, 0x00,
        0x0d, 0x30, 0x00, 0x00,
        0x0d, 0x20, 0x00, 0x00,
        0x06, 0x18, 0x00, 0x00,
        0x15, 0x0e, 0x09, 0x02,
        0x20, 0x0e, 0x14, 0x02,
        0x20, 0x0d, 0x14, 0x03,
        0x20, 0x0e, 0x08, 0x02
    };
    writeData(BoundBoxCtrlData, BoundBoxCtrlData_data, sizeof(BoundBoxCtrlData_data));

    // BlockBufferAdderData
    //
    const uint8_t BlockBufferAdderData_data[] = {
        0x0e, 0x07, 0x00
    };
    writeData(BlockBufferAdderData, BlockBufferAdderData_data, sizeof(BlockBufferAdderData_data));

    // BlockBuffer_X_Adder
    //
    const uint8_t BlockBuffer_X_Adder_data[] = {
        0x04, 0x04, 0x14, 0x04,
        0x10, 0x00, 0x08, 0x0d, 0x0d, 0x02, 0x02, 0x0c,
        0x03, 0x08, 0x0d, 0x0d, 0x02, 0x02, 0x0c, 0x03,
        0x08, 0x0d, 0x0d, 0x02, 0x02, 0x0c, 0x03, 0x08
    };
    writeData(BlockBuffer_X_Adder, BlockBuffer_X_Adder_data, sizeof(BlockBuffer_X_Adder_data));

    // BlockBuffer_Y_Adder
    //
    const uint8_t BlockBuffer_Y_Adder_data[] = {
        0x10, 0x08, 0x06, 0x06,
        0x14, 0x14, 0x18, 0x18, 0x18, 0x18, 0x18, 0x20,
        0x20, 0x12, 0x18, 0x08, 0x18, 0x08, 0x20, 0x20,
        0x02, 0x18, 0x08, 0x18, 0x08, 0x20, 0x20, 0x04
    };
    writeData(BlockBuffer_Y_Adder, BlockBuffer_Y_Adder_data, sizeof(BlockBuffer_Y_Adder_data));

    // VineYPosAdder
    //
    const uint8_t VineYPosAdder_data[] = {
        0x30, 0x00
    };
    writeData(VineYPosAdder, VineYPosAdder_data, sizeof(VineYPosAdder_data));

    // FirstSprXPos
    //
    const uint8_t FirstSprXPos_data[] = {
        0x00, 0x04, 0x00, 0x04
    };
    writeData(FirstSprXPos, FirstSprXPos_data, sizeof(FirstSprXPos_data));

    // FirstSprYPos
    //
    const uint8_t FirstSprYPos_data[] = {
        0x04, 0x00, 0x04, 0x00
    };
    writeData(FirstSprYPos, FirstSprYPos_data, sizeof(FirstSprYPos_data));

    // SecondSprXPos
    //
    const uint8_t SecondSprXPos_data[] = {
        0x08, 0x00, 0x08, 0x00
    };
    writeData(SecondSprXPos, SecondSprXPos_data, sizeof(SecondSprXPos_data));

    // SecondSprYPos
    //
    const uint8_t SecondSprYPos_data[] = {
        0x00, 0x08, 0x00, 0x08
    };
    writeData(SecondSprYPos, SecondSprYPos_data, sizeof(SecondSprYPos_data));

    // FirstSprTilenum
    //
    const uint8_t FirstSprTilenum_data[] = {
        0x83, 0x81, 0x82, 0x80
    };
    writeData(FirstSprTilenum, FirstSprTilenum_data, sizeof(FirstSprTilenum_data));

    // SecondSprTilenum
    //
    const uint8_t SecondSprTilenum_data[] = {
        0x82, 0x80, 0x83, 0x81
    };
    writeData(SecondSprTilenum, SecondSprTilenum_data, sizeof(SecondSprTilenum_data));

    // HammerSprAttrib
    //
    const uint8_t HammerSprAttrib_data[] = {
        0xc3, 0xc3, 0x03, 0x03
    };
    writeData(HammerSprAttrib, HammerSprAttrib_data, sizeof(HammerSprAttrib_data));

    // FlagpoleScoreNumTiles
    //
    const uint8_t FlagpoleScoreNumTiles_data[] = {
        0xfb, 0xf6,
        0xfb, 0xf8,
        0xfb, 0xfa,
        0x50, 0xf7,
        0x50, 0xf9
    };
    writeData(FlagpoleScoreNumTiles, FlagpoleScoreNumTiles_data, sizeof(FlagpoleScoreNumTiles_data));

    // JumpingCoinTiles
    //
    const uint8_t JumpingCoinTiles_data[] = {
        0x63, 0x62, 0x61, 0x60
    };
    writeData(JumpingCoinTiles, JumpingCoinTiles_data, sizeof(JumpingCoinTiles_data));

    // PowerUpGfxTable
    //
    const uint8_t PowerUpGfxTable_data[] = {
        0x79, 0x78, 0x77, 0x76, // 1-up mushroom
        0xe4, 0xe4, 0x8d, 0x8d, // star
        0xd9, 0xd9, 0xd6, 0xd6, // fire flower
        0x79, 0x78, 0x77, 0x76 // regular mushroom
    };
    writeData(PowerUpGfxTable, PowerUpGfxTable_data, sizeof(PowerUpGfxTable_data));

    // PowerUpAttributes
    //
    const uint8_t PowerUpAttributes_data[] = {
        0x01, 0x02, 0x01, 0x02
    };
    writeData(PowerUpAttributes, PowerUpAttributes_data, sizeof(PowerUpAttributes_data));

    // EnemyGraphicsTable
    //
    const uint8_t EnemyGraphicsTable_data[] = {
        0xfc, 0xfc, 0xfc, 0xfc, 0xf0, 0xf0, //            frame 3
        0xfc, 0xfc, 0xf1, 0xf1, 0xf1, 0xf1, //            frame 2
        0xf2, 0xf2, 0xf3, 0xf3, 0xf2, 0xf2, // jumpspring frame 1
        0xe9, 0xea, 0xe7, 0xe8, 0xfc, 0xfc, // bullet bill
        0xcb, 0xcc, 0xc5, 0xc6, 0xc3, 0xc4, //        rear frame 2
        0xfc, 0xc2, 0xc9, 0xca, 0xbe, 0xbf, //        front frame 2
        0xc7, 0xc8, 0xc5, 0xc6, 0xc3, 0xc4, // bowser rear frame 1
        0xfc, 0xc2, 0xc0, 0xc1, 0xbe, 0xbf, // bowser front frame 1
        0xd7, 0xd7, 0xd0, 0xd0, 0xfc, 0xfc, // podoboo
        0xee, 0xee, 0xed, 0xed, 0xec, 0xec, //               frame 2
        0xeb, 0xeb, 0xe6, 0xe6, 0xe5, 0xe5, // piranha plant frame 1
        0x8a, 0x8b, 0xe2, 0xe3, 0xd4, 0xd5, //            frame 4
        0xd2, 0xd3, 0xe2, 0xe3, 0xd4, 0xd5, //            frame 3
        0x8a, 0x8b, 0x88, 0x89, 0x7c, 0x7d, //            frame 2
        0xd2, 0xd3, 0x8c, 0xd1, 0x7c, 0x7d, // hammer bro frame 1
        0xcf, 0xcf, 0xce, 0xce, 0xcd, 0xcd, // mushroom retainer
        0xd8, 0xd8, 0xdb, 0xda, 0x7b, 0x7a, // princess
        0xbc, 0xbc, 0xbd, 0xbd, 0xfc, 0xfc, //        frame 2
        0xbc, 0xbc, 0xba, 0xbb, 0xb8, 0xb9, // lakitu frame 1
        0xef, 0xef, 0xfc, 0xfc, 0xfc, 0xfc, // defeated goomba
        0xf4, 0xf4, 0xf5, 0xf5, 0xfc, 0xfc, //                    frame 2
        0xf4, 0xf4, 0xf5, 0xf5, 0xfc, 0xfc, // buzzy beetle shell frame 1 (upside-down)
        0xf5, 0xf5, 0xf4, 0xf4, 0xfc, 0xfc, //                    frame 2
        0xf5, 0xf5, 0xf4, 0xf4, 0xfc, 0xfc, // buzzy beetle shell frame 1 (rightsideup)
        0x6d, 0x6d, 0x6f, 0x6f, 0xfc, 0xfc, //             frame 2
        0x6e, 0x6e, 0x6f, 0x6f, 0xfc, 0xfc, // koopa shell frame 1 (rightsideup)
        0x6f, 0x6f, 0x6d, 0x6d, 0xfc, 0xfc, //             frame 2
        0x6f, 0x6f, 0x6e, 0x6e, 0xfc, 0xfc, // koopa shell frame 1 (upside-down)
        0x73, 0x72, 0x71, 0x70, 0xfc, 0xfc, // goomba
        0xb5, 0xb7, 0xb3, 0xb6, 0xfc, 0xfc, //             frame 2
        0xb5, 0xb4, 0xb3, 0xb2, 0xfc, 0xfc, // cheep-cheep frame 1
        0xde, 0xde, 0xdd, 0xdd, 0xdc, 0xdc, //         frame 2
        0xdf, 0xdf, 0xdc, 0xdc, 0xfc, 0xfc, // bloober frame 1
        0x95, 0x94, 0x94, 0x95, 0xfc, 0xfc, //             frame 2
        0x8f, 0x8e, 0x8e, 0x8f, 0xfc, 0xfc, // spiny's egg frame 1
        0x9d, 0x9c, 0x9b, 0x9a, 0xfc, 0xfc, //       frame 2
        0x99, 0x98, 0x97, 0x96, 0xfc, 0xfc, // spiny frame 1
        0xa4, 0xa3, 0xa2, 0x6c, 0xa0, 0x6b, //                  frame 2
        0xa9, 0xa8, 0xa7, 0x6a, 0xa5, 0x69, // koopa paratroopa frame 1
        0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0xfc, //              frame 2
        0xa9, 0xa8, 0xa7, 0xa6, 0xa5, 0xfc, // koopa troopa frame 1
        0xb1, 0xb0, 0xaf, 0xae, 0xfc, 0xfc, //              frame 2
        0xad, 0xac, 0xab, 0xaa, 0xfc, 0xfc // buzzy beetle frame 1
    };
    writeData(EnemyGraphicsTable, EnemyGraphicsTable_data, sizeof(EnemyGraphicsTable_data));

    // EnemyGfxTableOffsets
    //
    const uint8_t EnemyGfxTableOffsets_data[] = {
        0xfc, 0xf6, 0xf0,
        0xd8, 0xd2, 0x9c, 0x48, 0xff, 0x24, 0x90, 0x18,
        0x18, 0x18, 0xc0, 0xcc, 0x48, 0x48, 0x18, 0xea,
        0x3c, 0x54, 0xa8, 0x0c, 0x0c, 0x00, 0x0c, 0x0c
    };
    writeData(EnemyGfxTableOffsets, EnemyGfxTableOffsets_data, sizeof(EnemyGfxTableOffsets_data));

    // EnemyAttributeData
    //
    const uint8_t EnemyAttributeData_data[] = {
        0x02, 0x02, 0x02,
        0x01, 0x01, 0x02, 0x02, 0xff, 0x02, 0x01, 0x01,
        0x02, 0x01, 0x21, 0x02, 0x02, 0x01, 0x01, 0x03,
        0x03, 0x03, 0x01, 0x01, 0x02, 0x03, 0x02, 0x01
    };
    writeData(EnemyAttributeData, EnemyAttributeData_data, sizeof(EnemyAttributeData_data));

    // EnemyAnimTimingBMask
    //
    const uint8_t EnemyAnimTimingBMask_data[] = {
        0x18, 0x08
    };
    writeData(EnemyAnimTimingBMask, EnemyAnimTimingBMask_data, sizeof(EnemyAnimTimingBMask_data));

    // JumpspringFrameOffsets
    //
    const uint8_t JumpspringFrameOffsets_data[] = {
        0x18, 0x19, 0x1a, 0x19, 0x18
    };
    writeData(JumpspringFrameOffsets, JumpspringFrameOffsets_data, sizeof(JumpspringFrameOffsets_data));

    // DefaultBlockObjTiles
    //
    const uint8_t DefaultBlockObjTiles_data[] = {
        0x86, 0x86, 0x85, 0x85 // brick w/ line (these are sprite tiles, not BG!)
    };
    writeData(DefaultBlockObjTiles, DefaultBlockObjTiles_data, sizeof(DefaultBlockObjTiles_data));

    // ExplosionTiles
    //
    const uint8_t ExplosionTiles_data[] = {
        0x66, 0x67, 0x68
    };
    writeData(ExplosionTiles, ExplosionTiles_data, sizeof(ExplosionTiles_data));

    // PlayerGfxTblOffsets
    //
    const uint8_t PlayerGfxTblOffsets_data[] = {
        0xb8, 0xb0, 0xa0, 0x60, 0x78, 0xb8, 0x88, 0x80,
        0x58, 0x50, 0x40, 0x00, 0x18, 0xc8, 0x28, 0x20
    };
    writeData(PlayerGfxTblOffsets, PlayerGfxTblOffsets_data, sizeof(PlayerGfxTblOffsets_data));

    // PlayerGraphicsTable
    //
    const uint8_t PlayerGraphicsTable_data[] = {
        0x4b, 0x4b, 0x4a, 0x4a, 0x4d, 0x4c, 0x01, 0x00, // big player standing
        0x4e, 0x4e, 0x4d, 0x4c, 0x01, 0x00, 0xfc, 0xfc, // intermediate grow frame
        0x4f, 0x4f, 0x37, 0x3a, 0xfc, 0xfc, 0xfc, 0xfc, // small player standing
        0x9f, 0x9f, 0x9e, 0x9e, 0xfc, 0xfc, 0xfc, 0xfc, // killed
        0x93, 0x92, 0x37, 0x3a, 0xfc, 0xfc, 0xfc, 0xfc, //          frame 2
        0x91, 0x90, 0x33, 0x32, 0xfc, 0xfc, 0xfc, 0xfc, // climbing frame 1
        0x49, 0x48, 0x33, 0x32, 0xfc, 0xfc, 0xfc, 0xfc, //          frame 3
        0x47, 0x44, 0x33, 0x32, 0xfc, 0xfc, 0xfc, 0xfc, //          frame 2
        0x45, 0x44, 0x33, 0x32, 0xfc, 0xfc, 0xfc, 0xfc, // swimming frame 1
        0x43, 0x42, 0x41, 0x32, 0xfc, 0xfc, 0xfc, 0xfc, // jumping
        0x40, 0x3f, 0x3e, 0x3d, 0xfc, 0xfc, 0xfc, 0xfc, // skidding
        0x3c, 0x3b, 0x37, 0x3a, 0xfc, 0xfc, 0xfc, 0xfc, //         frame 3
        0x39, 0x38, 0x37, 0x36, 0xfc, 0xfc, 0xfc, 0xfc, //         frame 2
        0x35, 0x34, 0x33, 0x32, 0xfc, 0xfc, 0xfc, 0xfc, // walking frame 1
        0x0f, 0x0e, 0x2b, 0x2a, 0x29, 0x28, 0x09, 0x08, // fireball throwing
        0x5a, 0x5a, 0x59, 0x58, 0x09, 0x08, 0xfc, 0xfc, // crouching
        0x5f, 0x5e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, //          frame 2
        0x5d, 0x5c, 0x2b, 0x2a, 0x29, 0x28, 0x09, 0x08, // climbing frame 1
        0x2d, 0x2c, 0x2f, 0x2e, 0x0b, 0x0a, 0x09, 0x08, //          frame 3
        0x2d, 0x2c, 0x30, 0x0c, 0x0b, 0x0a, 0x09, 0x08, //          frame 2
        0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x09, 0x08, // swimming frame 1
        0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20, // jumping
        0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, // skidding
        0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, //         frame 3
        0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, //         frame 2
        0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00 // walking frame 1
    };
    writeData(PlayerGraphicsTable, PlayerGraphicsTable_data, sizeof(PlayerGraphicsTable_data));

    // SwimKickTileNum
    //
    const uint8_t SwimKickTileNum_data[] = {
        0x46, 0x31
    };
    writeData(SwimKickTileNum, SwimKickTileNum_data, sizeof(SwimKickTileNum_data));

    // IntermediatePlayerData
    //
    const uint8_t IntermediatePlayerData_data[] = {
        0x04, 0xff, 0x60, 0x00, 0x01, 0x58
    };
    writeData(IntermediatePlayerData, IntermediatePlayerData_data, sizeof(IntermediatePlayerData_data));

    // ChangeSizeOffsetAdder
    //
    const uint8_t ChangeSizeOffsetAdder_data[] = {
        0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02,
        0x02, 0x01, 0x00, 0x02, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00
    };
    writeData(ChangeSizeOffsetAdder, ChangeSizeOffsetAdder_data, sizeof(ChangeSizeOffsetAdder_data));

    // ObjOffsetData
    //
    const uint8_t ObjOffsetData_data[] = {
        0x0d, 0x16, 0x07
    };
    writeData(ObjOffsetData, ObjOffsetData_data, sizeof(ObjOffsetData_data));

    // XOffscreenBitsData
    //
    const uint8_t XOffscreenBitsData_data[] = {
        0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x80,
        0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f
    };
    writeData(XOffscreenBitsData, XOffscreenBitsData_data, sizeof(XOffscreenBitsData_data));

    // DefaultXOnscreenOfs
    //
    const uint8_t DefaultXOnscreenOfs_data[] = {
        0x07, 0x0f, 0x07
    };
    writeData(DefaultXOnscreenOfs, DefaultXOnscreenOfs_data, sizeof(DefaultXOnscreenOfs_data));

    // YOffscreenBitsData
    //
    const uint8_t YOffscreenBitsData_data[] = {
        0x00,
        0x01, 0x03, 0x07, 0x0f,
        0x0e, 0x0c, 0x08, 0x00
    };
    writeData(YOffscreenBitsData, YOffscreenBitsData_data, sizeof(YOffscreenBitsData_data));

    // DefaultYOnscreenOfs
    //
    const uint8_t DefaultYOnscreenOfs_data[] = {
        0x04, 0x00, 0x04
    };
    writeData(DefaultYOnscreenOfs, DefaultYOnscreenOfs_data, sizeof(DefaultYOnscreenOfs_data));

    // HighPosUnitData
    //
    const uint8_t HighPosUnitData_data[] = {
        0x00, 0xff
    };
    writeData(HighPosUnitData, HighPosUnitData_data, sizeof(HighPosUnitData_data));

    // SwimStompEnvelopeData
    //
    const uint8_t SwimStompEnvelopeData_data[] = {
        0x92, 0x93, 0x95, 0x97, 0x9a, 0x90,
        0x90, 0x92, 0x94, 0x95, 0x96, 0x98, 0x9b, 0x9f
    };
    writeData(SwimStompEnvelopeData, SwimStompEnvelopeData_data, sizeof(SwimStompEnvelopeData_data));

    // ExtraLifeFreqData
    //
    const uint8_t ExtraLifeFreqData_data[] = {
        0x44, 0x4e, 0x56, 0x54, 0x02, 0x58
    };
    writeData(ExtraLifeFreqData, ExtraLifeFreqData_data, sizeof(ExtraLifeFreqData_data));

    // PowerUpGrabFreqData
    //
    const uint8_t PowerUpGrabFreqData_data[] = {
        0x14, 0x1c, 0x22,
        0x2c, 0x22, 0x2c, 0x34, 0x3a, 0x64, 0x3a, 0x24, 0x2c,
        0x32, 0x3c, 0x32, 0x3c, 0x64, 0x4a, 0x50, 0x4a, 0x28,
        0x30, 0x36, 0x3e, 0x36, 0x3e, 0x48, 0x4c, 0x52, 0x4c
    };
    writeData(PowerUpGrabFreqData, PowerUpGrabFreqData_data, sizeof(PowerUpGrabFreqData_data));

    // PUp_VGrow_FreqData
    //
    const uint8_t PUp_VGrow_FreqData_data[] = {
        0x32, 0x30, 0x04, 0x22, 0x30, 0x2e, 0x04, 0x20,
        0x2e, 0x2c, 0x04, 0x1e, 0x2c, 0x2a, 0x04, 0x1c, // used by vinegrow
        0x2a, 0x28, 0x04, 0x1a, 0x28, 0x26, 0x04, 0x18,
        0x26, 0x24, 0x04, 0x16, 0x24, 0x22, 0x04, 0x14 // used by both
    };
    writeData(PUp_VGrow_FreqData, PUp_VGrow_FreqData_data, sizeof(PUp_VGrow_FreqData_data));

    // BrickShatterFreqData
    //
    const uint8_t BrickShatterFreqData_data[] = {
        0x0c, 0x06, 0x0d, 0x08, 0x0d, 0x03, 0x09, 0x0a,
        0x0f, 0x0c, 0x06, 0x0b, 0x0d, 0x0e, 0x0e, 0x01
    };
    writeData(BrickShatterFreqData, BrickShatterFreqData_data, sizeof(BrickShatterFreqData_data));

    // MusicHeaderData
    //
    const uint8_t MusicHeaderData_data[] = {
        GroundLevelPart4CHdr - MHD, GroundLevelPart4AHdr - MHD, GroundLevelPart4BHdr - MHD, GroundLevelPart4AHdr - MHD,
        GroundLevelLeadInHdr - MHD, GroundLevelPart3AHdr - MHD, GroundLevelPart3BHdr - MHD, GroundLevelPart3AHdr - MHD,
        GroundLevelPart4CHdr - MHD, GroundLevelPart4AHdr - MHD, GroundLevelPart4BHdr - MHD, GroundLevelPart4AHdr - MHD,
        GroundLevelPart4CHdr - MHD, GroundLevelPart4AHdr - MHD, GroundLevelPart4BHdr - MHD, GroundLevelPart4AHdr - MHD,
        GroundLevelPart1Hdr - MHD, GroundLevelPart1Hdr - MHD,
        GroundLevelLeadInHdr - MHD, GroundLevelPart3AHdr - MHD, GroundLevelPart3BHdr - MHD, GroundLevelPart3AHdr - MHD,
        GroundLevelPart2CHdr - MHD, GroundLevelPart2AHdr - MHD, GroundLevelPart2BHdr - MHD, GroundLevelPart2AHdr - MHD,
        GroundLevelPart2CHdr - MHD, GroundLevelPart2AHdr - MHD, GroundLevelPart2BHdr - MHD, GroundLevelPart2AHdr - MHD,
        GroundLevelPart1Hdr - MHD, GroundLevelPart1Hdr - MHD,
        GroundLevelLeadInHdr - MHD, // ground level music layout
        SilenceHdr - MHD,
        Star_CloudHdr - MHD,
        GroundLevelLeadInHdr - MHD,
        Star_CloudHdr - MHD,
        CastleMusHdr - MHD,
        UndergroundMusHdr - MHD,
        WaterMusHdr - MHD,
        GroundLevelPart1Hdr - MHD, // area music
        SilenceHdr - MHD,
        TimeRunningOutHdr - MHD,
        EndOfLevelMusHdr - MHD,
        GameOverMusHdr - MHD,
        WinCastleMusHdr - MHD,
        VictoryMusHdr - MHD,
        GameOverMusHdr - MHD,
        DeathMusHdr - MHD // event music
    };
    writeData(MusicHeaderData, MusicHeaderData_data, sizeof(MusicHeaderData_data));

    // Star_CloudMData
    //
    const uint8_t Star_CloudMData_data[] = {
        0x00, 0xd0, 0xc4, 0xd0, 0x31, 0xd0, 0xc4, 0xd0, 0x21,
        0x2c, 0x22, 0x04, 0x84, 0x2c, 0x22, 0x85, 0x14, 0x86,
        0x30, 0x26, 0x04, 0x84, 0x30, 0x26, 0x85, 0x18, 0x86,
        0x1d, 0x94, 0x9c, 0x94, 0x1d, 0x1d, 0x94, 0x1d, 0x1d, 0x1d,
        0x1f, 0x98, 0x9e, 0x98, 0x1f, 0x1f, 0x98, 0x1f, 0x1f, 0x1f,
        0x00, 0x2a, 0x2a, 0x84, 0x2a, 0x85, 0x04, 0x2a, 0x04, 0x82, 0x2a, 0x2a, 0x2a,
        0x2c, 0x2c, 0x84, 0x2c, 0x85, 0x04, 0x2c, 0x04, 0x82, 0x2c, 0x2c, 0x2c, 0x84
    };
    writeData(Star_CloudMData, Star_CloudMData_data, sizeof(Star_CloudMData_data));

    // GroundM_P1Data
    //
    const uint8_t GroundM_P1Data_data[] = {
        0x2a, 0x85, 0x30, 0x2c, 0x82,
        0x34, 0x3a, 0x84, 0x36, 0x04, 0x40, 0x82, 0x3a, 0x34, 0x22, 0x87,
        0x04, 0x26, 0x28, 0x82, 0x2a, 0x26, 0x84, 0x1c, 0x22, 0x2c, 0x85
    };
    writeData(GroundM_P1Data, GroundM_P1Data_data, sizeof(GroundM_P1Data_data));

    // SilenceData
    //
    const uint8_t SilenceData_data[] = {
        0x22, 0x85, 0x2a,
        0x26, 0x04, 0x2c, 0x04, 0x34, 0x30, 0x04, 0x36, 0x82, 0x34, 0x2c, 0x1c,
        0x87, 0x04, 0x1e, 0x20, 0x82, 0x22, 0x1e, 0x84, 0x14, 0x1c, 0x22, 0x85,
        0x59, 0x9e, 0x9c, 0x27, 0x2b, 0xa6, 0x2d,
        0xeb, 0xe3, 0xd5, 0x15, 0x96, 0x19, 0x15, 0x4d, 0x55, 0x5d,
        0x00
    };
    writeData(SilenceData, SilenceData_data, sizeof(SilenceData_data));

    // GroundM_P2AData
    //
    const uint8_t GroundM_P2AData_data[] = {
        0x1e, 0x2c, 0x84, 0x2c, 0x82,
        0x1e, 0x85, 0x2c, 0x84, 0x22, 0x14, 0x85,
        0x9e, 0x9c, 0x94, 0x84, 0xa2, 0x9e, 0x9c,
        0x84, 0xac, 0x2b, 0xb0, 0xb2, 0xb4, 0x05,
        0x00, 0x30, 0x2c, 0x26, 0x04, 0x2c, 0x26, 0x24, 0x04,
        0x34, 0x04, 0x32, 0x36, 0x38, 0x3a, 0x82, 0x04, 0x84
    };
    writeData(GroundM_P2AData, GroundM_P2AData_data, sizeof(GroundM_P2AData_data));

    // GroundM_P2BData
    //
    const uint8_t GroundM_P2BData_data[] = {
        0x22, 0x4e, 0x84, 0x4e, 0x82, 0x4e,
        0x2c, 0x84, 0x22, 0x82, 0x1c, 0x14, 0x85,
        0x45, 0xb6, 0xb6, 0x37,
        0x84, 0xac, 0x2b, 0xb0, 0xb2, 0xb4, 0x05,
        0x00, 0x64, 0x86, 0x64, 0x04, 0x64, 0x04,
        0x34, 0x04, 0x32, 0x36, 0x38, 0x3a, 0x82, 0x04, 0x84
    };
    writeData(GroundM_P2BData, GroundM_P2BData_data, sizeof(GroundM_P2BData_data));

    // GroundM_P2CData
    //
    const uint8_t GroundM_P2CData_data[] = {
        0x00, 0xd0, 0xc4, 0xd0, 0x31, 0xd0, 0xc4, 0xd0, 0x21,
        0x14, 0x22, 0x84, 0x22,
        0x82, 0x2c, 0x28, 0x24, 0x85, 0x14, 0x84,
        0x85, 0x9d, 0x05, 0x9e, 0x05, 0xa4, 0x05,
        0x00, 0x04, 0x2c, 0x86, 0x30, 0x85, 0x32, 0x85, 0x04, 0x84
    };
    writeData(GroundM_P2CData, GroundM_P2CData_data, sizeof(GroundM_P2CData_data));

    // GroundM_P3AData
    //
    const uint8_t GroundM_P3AData_data[] = {
        0x95, 0x9c, 0x1d, 0xa2, 0x29, 0xa4, 0x25, 0x25, 0xa4,
        0x00, 0x22, 0x86, 0x26, 0x04, 0x2c, 0x34, 0x04,
        0x30, 0x2c, 0x82, 0x2c, 0x2c, 0x84, 0x2c, 0x82
    };
    writeData(GroundM_P3AData, GroundM_P3AData_data, sizeof(GroundM_P3AData_data));

    // GroundM_P3BData
    //
    const uint8_t GroundM_P3BData_data[] = {
        0x0c, 0x84, 0x14, 0x22, 0x85, 0x24, 0x84, 0x1a, 0x0e, 0x85,
        0x04, 0x63, 0xa8, 0xa4, 0x25, 0x25, 0xa4,
        0x00, 0x04, 0x04, 0x34, 0x85, 0x30, 0x2c, 0x04, 0x2c, 0x04, 0x2c, 0x2c, 0x82
    };
    writeData(GroundM_P3BData, GroundM_P3BData_data, sizeof(GroundM_P3BData_data));

    // GroundMLdInData
    //
    const uint8_t GroundMLdInData_data[] = {
        0x00, 0x90, 0x90, 0x90, 0x31, 0x71, 0x31, 0x90, 0x31, 0x90, 0x31,
        0x22, 0x3a, 0x86, 0x04, 0x18, 0x18, 0x82, 0x18, 0x18, 0x84, 0x18, 0x82,
        0xa3, 0x05, 0x2b, 0x21, 0xa0, 0x21, 0x21, 0xa0,
        0x00, 0x04, 0x3a, 0x86, 0x34, 0x84, 0x2c, 0x82, 0x34, 0x34, 0x84, 0x34, 0x82
    };
    writeData(GroundMLdInData, GroundMLdInData_data, sizeof(GroundMLdInData_data));

    // GroundM_P4AData
    //
    const uint8_t GroundM_P4AData_data[] = {
        0x04, 0x1e, 0x2c, 0x2c, 0x82, 0x1e, 0x1e,
        0x2c, 0x22, 0x84, 0x20, 0x82, 0x14, 0x85,
        0x9f, 0xac, 0x2d, 0x9e, 0x1d, 0x5d, 0x27, 0xac,
        0x00, 0x26, 0x86, 0x36, 0x04, 0x36, 0x26, 0x82,
        0x24, 0x84, 0x22, 0x85, 0x2c, 0x84, 0x34, 0x82
    };
    writeData(GroundM_P4AData, GroundM_P4AData_data, sizeof(GroundM_P4AData_data));

    // GroundM_P4BData
    //
    const uint8_t GroundM_P4BData_data[] = {
        0x04, 0x22, 0x2c, 0x2c, 0x82, 0x22, 0x22,
        0x2a, 0x22, 0x84, 0x1e, 0x82, 0x18, 0x85,
        0x9d, 0x9e, 0x27, 0xac, 0xf1, 0xf5, 0xf7, 0xf7, 0xf7, 0xe3,
        0x00, 0x22, 0x86, 0x26, 0x04, 0x2c, 0x34, 0x82,
        0x36, 0x3a, 0x40, 0x40, 0x40, 0x2a, 0x87
    };
    writeData(GroundM_P4BData, GroundM_P4BData_data, sizeof(GroundM_P4BData_data));

    // DeathMusData
    //
    const uint8_t DeathMusData_data[] = {
        0x04, 0x86 // death music share data with fourth part c of ground level music 
    };
    writeData(DeathMusData, DeathMusData_data, sizeof(DeathMusData_data));

    // GroundM_P4CData
    //
    const uint8_t GroundM_P4CData_data[] = {
        0x00, 0x11, 0x31, 0x90, 0x51,
        0x14, 0x86, 0x22, 0x2c, 0x84, 0x2a, 0x26, 0x22, 0x87, 0x22, 0x82, 0x22, 0x85,
        0x04, 0x86, // death music only
        0x95, 0x9c, 0x1d, 0xa2, 0xeb, 0xed, 0xf1, 0xb0, 0x31, 0xa2,
        0x45, 0x6c, 0x6a, 0x68, 0x00, // death music only
        0x00, 0x04, 0x2c, 0x86, 0x30, 0x34, 0x36, 0x87, 0x36, 0x04, 0x36, 0x2a, 0x82
    };
    writeData(GroundM_P4CData, GroundM_P4CData_data, sizeof(GroundM_P4CData_data));

    // CastleMusData
    //
    const uint8_t CastleMusData_data[] = {
        0x1c, 0x1a, 0x1c, 0x26,
        0x28, 0x1c, 0x83, 0x1e, 0x84, 0x20, 0x18, 0x83, 0x1a, 0x84,
        0x74, 0x72, 0x74, 0x76, 0x74, 0x76, 0x78, 0x76,
        0x74, 0x72, 0x74, 0x76, 0x74, 0x76, 0x78, 0x76,
        0x6c, 0x6e, 0x70, 0x6e, 0x70, 0x6e, 0x6c, 0x6e,
        0x6c, 0x6e, 0x70, 0x6e, 0x70, 0x6e, 0x6c, 0x6e,
        0x6e, 0x70, 0x72, 0x70, 0x6e, 0x6c, 0x6e, 0x70,
        0x6e, 0x70, 0x72, 0x70, 0x6e, 0x6c, 0x6e, 0x70, 0x04,
        0x00, 0x2e, 0x28, 0x2c, 0x28, 0x2e, 0x28, 0x30, 0x28,
        0x2e, 0x28, 0x30, 0x28, 0x32, 0x28, 0x30, 0x28,
        0x2e, 0x28, 0x2c, 0x28, 0x2e, 0x28, 0x30, 0x28,
        0x2e, 0x28, 0x30, 0x28, 0x32, 0x28, 0x30, 0x28,
        0x24, 0x20, 0x26, 0x20, 0x28, 0x20, 0x26, 0x20,
        0x28, 0x20, 0x26, 0x20, 0x24, 0x20, 0x26, 0x20,
        0x24, 0x20, 0x26, 0x20, 0x28, 0x20, 0x26, 0x20,
        0x28, 0x20, 0x26, 0x20, 0x24, 0x20, 0x26, 0x20,
        0x26, 0x22, 0x28, 0x22, 0x2a, 0x22, 0x28, 0x22,
        0x26, 0x22, 0x24, 0x22, 0x26, 0x22, 0x28, 0x22,
        0x26, 0x22, 0x28, 0x22, 0x2a, 0x22, 0x28, 0x22,
        0x26, 0x22, 0x24, 0x22, 0x26, 0x22, 0x28, 0x22, 0x80
    };
    writeData(CastleMusData, CastleMusData_data, sizeof(CastleMusData_data));

    // GameOverMusData
    //
    const uint8_t GameOverMusData_data[] = {
        0x14, 0x80, 0x16, 0x80, 0x1e, 0x86,
        0x14, 0x84, 0x04, 0x04, 0x1c, 0x04, 0x04, 0x22, 0x82,
        0x9d, 0x98, 0x9c, 0x1e, 0x9f, 0x0d, 0x05, 0x94, 0x05, 0x9c,
        0x00, 0x22, 0x80, 0x24, 0x28, 0x24, 0x84, 0x26, 0x2a, 0x26,
        0x87, 0x1c, 0x84, 0x04, 0x04, 0x22, 0x04, 0x04, 0x2c, 0x82
    };
    writeData(GameOverMusData, GameOverMusData_data, sizeof(GameOverMusData_data));

    // TimeRunOutMusData
    //
    const uint8_t TimeRunOutMusData_data[] = {
        0x22, 0x84, 0x04, 0x22, 0x04, 0x46, 0x46, 0x04, 0x46, 0x2e, 0x04,
        0x64, 0x64, 0x04, 0x64, 0x2c, 0x04, 0x42, 0x42, 0x04, 0x42, 0x2a, 0x81,
        0x2b, 0x44, 0x6a,
        0xa8, 0x68, 0xa8, 0x4a, 0xa6, 0x66, 0xa6, 0x48, 0xa4, 0x64, 0xa4, 0x46,
        0x00, 0x36, 0x84, 0x04, 0x36, 0x04, 0x34, 0x34, 0x04, 0x34, 0x20, 0x04,
        0x32, 0x32, 0x04, 0x32, 0x1e, 0x04, 0x30, 0x30, 0x04, 0x30, 0x1c, 0x81
    };
    writeData(TimeRunOutMusData, TimeRunOutMusData_data, sizeof(TimeRunOutMusData_data));

    // WinLevelMusData
    //
    const uint8_t WinLevelMusData_data[] = {
        0x2c, 0x80, 0x30, 0x30, 0x30, 0x87,
        0x36, 0x86, 0x28, 0x1e, 0x18, 0x87, 0x04, 0x86, 0x04, 0x2c,
        0x84, 0x32, 0x86, 0x24, 0x1a, 0x14, 0x87, 0x04, 0x04, 0x04,
        0x2c, 0x84, 0x34, 0x86, 0x22, 0x1c, 0x14, 0x87, 0x04, 0x86,
        0x00, // unused byte
        0x34, 0xff, 0xff, 0xff, 0xbf, 0xf7, 0xf1,
        0xe9, 0xdf, 0xd9, 0xd1, 0xb3, 0xbd, 0xf3, 0xed, 0xe5, 0xdb,
        0xd5, 0xcf, 0xb5, 0xbb, 0xf5, 0xed, 0xe3, 0xdd, 0xd5, 0xcd,
        0x00, 0x64, 0x80,
        0x30, 0x30, 0x86, 0x28, 0x1e, 0x18, 0x10, 0x08, 0x04, 0x87,
        0x24, 0x2c, 0x86, 0x24, 0x1a, 0x14, 0x0e, 0x60, 0x04, 0x87,
        0x22, 0x2c, 0x86, 0x22, 0x1c, 0x14, 0x0c, 0x06, 0x04, 0x87
    };
    writeData(WinLevelMusData, WinLevelMusData_data, sizeof(WinLevelMusData_data));

    // UndergroundMusData
    //
    const uint8_t UndergroundMusData_data[] = {
        0x00,
        0x04, 0x04, 0x80, 0x0e, 0x62, 0x10, 0x12, 0x1a, 0x24,
        0x87, 0x26, 0x28, 0x1c, 0x1e, 0x20, 0x14, 0x83, 0x16,
        0x0c, 0x0e, 0x18, 0x1a, 0x14, 0x84, 0x16, 0x18, 0x1a, 0x83,
        0x04, 0x86, 0x1a, 0x60, 0x18, 0x5e, 0x1e, 0x08, 0x82,
        0x04, 0x80, 0x1a, 0x60, 0x18, 0x5e, 0x1e, 0x08, 0x82,
        0x04, 0x80, 0x28, 0x10, 0x26, 0x62, 0x2c, 0x14, 0x82,
        0x04, 0x80, 0x28, 0x10, 0x26, 0x62, 0x2c, 0x14, 0x82
    };
    writeData(UndergroundMusData, UndergroundMusData_data, sizeof(UndergroundMusData_data));

    // WaterMusData
    //
    const uint8_t WaterMusData_data[] = {
        0x14, 0x86, 0x12, 0x81,
        0x1e, 0x85, 0x1e, 0x1e, 0x81, 0x22, 0x22, 0x0c, 0x34, 0x22, 0x5c,
        0x36, 0x22, 0x12, 0x36, 0x26, 0x14, 0x36, 0x26, 0x16, 0x36,
        0x26, 0x18, 0x34, 0x22, 0x16, 0x2e, 0x22, 0x10, 0x30, 0x22,
        0x12, 0x34, 0x22, 0x14, 0x2c, 0x22, 0x0c, 0x2c, 0x22, 0x14, 0x2a, 0x22, 0x12,
        0x2a, 0x22, 0x18, 0x2a, 0x22, 0x12, 0x2a, 0x22, 0x18, 0x28,
        0x20, 0x16, 0x2a, 0x22, 0x18, 0x2c, 0x22, 0x1c, 0x2c, 0x22,
        0x14, 0x2a, 0x22, 0x12, 0x2c, 0x22, 0x14, 0x2c, 0x22, 0x1c,
        0x2c, 0x22, 0x14, 0x2a, 0x22, 0x12, 0x2c, 0x22, 0x14, 0x82,
        0x22, 0x86, 0x22, 0x82, 0x04, 0x04, 0x84,
        0x9d, 0x5e, 0x6b, 0x6a, 0x6a, 0xaa, 0xa2, 0x9e,
        0x95, 0x85, 0xad, 0xaf, 0xb1, 0x85, 0xaf, 0xb1, 0xb5, 0xc4,
        0x23, 0xa6, 0xd2, 0x9f, 0x85, 0x9f, 0x9d, 0x9f, 0xc4, 0x23,
        0xa6, 0xe0, 0xa3, 0x85, 0xa3, 0xa1, 0xa3, 0x9f, 0x44, 0x5c,
        0x44, 0x58, 0x58, 0x58, 0x96, 0x94, 0x92, 0x94, 0x96, 0x98,
        0x00, 0xb0, 0x50, 0x50, 0x84, 0xb0, 0x90, 0x84,
        0x00, 0x2c, 0x86, 0x2a, 0x81, 0x34, 0x85, 0x34, 0x34, 0x81,
        0x36, 0x2a, 0x26, 0x82, 0x34, 0x86,
        0x36, 0x81, 0x04, 0x82, 0x3a, 0x81, 0x36, 0x82, 0x36, 0x36, 0x36, 0x86,
        0x3a, 0x81, 0x04, 0x82, 0x40, 0x81, 0x3a, 0x82, 0x3a, 0x3a, 0x3a, 0x86,
        0x22, 0x81, 0x04, 0x85, 0x34, 0x84, 0x36, 0x82, 0x22, 0x83, 0x30, 0x86,
        0x2e, 0x2c, 0x2a, 0x26, 0x22, 0x04, 0x81, 0x30, 0x2e, 0x30, 0x86,
        0x22, 0x81, 0x04, 0x85, 0x34, 0x84, 0x36, 0x82, 0x32, 0x83, 0x34, 0x86,
        0x30, 0x2c, 0x2a, 0x26, 0x22, 0x04, 0x81, 0x34, 0x32, 0x34, 0x86,
        0x22, 0x82, 0x2a, 0x83, 0x04, 0x2a, 0x04, 0x2a, 0x2a, 0x2a, 0x81,
        0x28, 0x26, 0x22, 0x20, 0x1c, 0x18, 0x82
    };
    writeData(WaterMusData, WaterMusData_data, sizeof(WaterMusData_data));

    // EndOfCastleMusData
    //
    const uint8_t EndOfCastleMusData_data[] = {
        0x30, 0x84, 0x2c, 0x2c, 0x2c, 0x87, 0x28, 0x81,
        0x28, 0x28, 0x80, 0x28, 0x1a, 0x22, 0x28, 0x1a, 0x22, 0x28, 0x81,
        0x16, 0x16, 0x16, 0x16, 0x81, 0x16, 0x16, 0x80, 0x16, 0x81, 0x16, 0x86,
        0x14, 0x14, 0x14, 0x14, 0x81, 0x14, 0x14, 0x80, 0x14, 0x81, 0x14, 0x86,
        0x2b, 0xe7, 0xe7, 0xe7, 0x62, 0x22, 0x22, 0x62,
        0x50, 0x5a, 0x62, 0x50, 0x5a, 0x62,
        0x5e, 0x5e, 0x5e, 0x5e, 0x1e, 0x1e, 0x5e,
        0x4e, 0x56, 0x5e, 0x4e, 0x56, 0x5e,
        0x5c, 0x5c, 0x5c, 0x5c, 0x1c, 0x1c, 0x5c,
        0x4c, 0x54, 0x5c, 0x4c, 0x54, 0x5c,
        0x00, 0x3a, 0x84, 0x36, 0x36, 0x36, 0x87,
        0x32, 0x85, 0x22, 0x28, 0x32, 0x22, 0x28, 0x32, 0x81,
        0x04, 0x2e, 0x85, 0x1e, 0x24, 0x2e, 0x1e, 0x24, 0x2e, 0x81,
        0x04, 0x2c, 0x85, 0x1c, 0x22, 0x2c, 0x1c, 0x22, 0x2c, 0x81
    };
    writeData(EndOfCastleMusData, EndOfCastleMusData_data, sizeof(EndOfCastleMusData_data));

    // VictoryMusData
    //
    const uint8_t VictoryMusData_data[] = {
        0xff, 0xff, 0xff,
        0x14, 0x0c, 0x22, 0x1e, 0x18, 0x1c, 0x1e, 0x22, 0x26,
        0x14, 0x1c, 0x1a, 0x18, 0x04, 0x14, 0x12, 0x83,
        0x2d, 0x31, 0xea, 0xf6, 0xf4, 0xf0, 0x74, 0x75, 0xec,
        0x23, 0xe0, 0xde, 0x1d, 0xe3, 0xe1, 0xe3,
        0x00, 0x1c, 0x04, 0x1e, 0x18, 0x26, 0x22, 0x1e, 0x22, 0x1c, 0x83,
        0x12, 0x84, 0x10, 0x62, 0x83, 0x0c, 0x84, 0x04, 0x83
    };
    writeData(VictoryMusData, VictoryMusData_data, sizeof(VictoryMusData_data));

    // FreqRegLookupTbl
    //
    const uint8_t FreqRegLookupTbl_data[] = {
        0x6a, 0x00, 0xfc, 0x01, 0xcf, 0x02, 0xf9, 0x02,
        0x57, 0x03, 0x75, 0x04, 0x23, 0x00, 0x2a, 0x00,
        0x35, 0x00, 0x3b, 0x00, 0x43, 0x00, 0x47, 0x00,
        0x50, 0x00, 0x59, 0x00, 0x5f, 0x00, 0x64, 0x00,
        0x54, 0x00, 0x71, 0x00, 0x7e, 0x00, 0x77, 0x00,
        0x86, 0x00, 0x8e, 0x00, 0x97, 0x00, 0xa0, 0x00,
        0xa9, 0x00, 0xb3, 0x00, 0xbe, 0x00, 0xc9, 0x00,
        0xd5, 0x00, 0xe2, 0x00, 0xef, 0x00, 0xfe, 0x00,
        0x0d, 0x01, 0x1d, 0x01, 0x2e, 0x01, 0x40, 0x01,
        0x53, 0x01, 0x67, 0x01, 0x7c, 0x01, 0x93, 0x01,
        0xab, 0x01, 0xc4, 0x01, 0xdf, 0x01, 0x1a, 0x02,
        0x3a, 0x02, 0x5c, 0x02, 0x80, 0x02, 0xa6, 0x02,
        0x00, 0x00, 0x2f, 0x00, 0x88, 0x00
    };
    writeData(FreqRegLookupTbl, FreqRegLookupTbl_data, sizeof(FreqRegLookupTbl_data));

    // MusicLengthLookupTbl
    //
    const uint8_t MusicLengthLookupTbl_data[] = {
        0x04, 0x0c, 0x09, 0x06, 0x02, 0x03, 0x01, 0x12,
        0x08, 0x18, 0x12, 0x0c, 0x04, 0x06, 0x02, 0x24,
        0x0c, 0x24, 0x1b, 0x12, 0x06, 0x09, 0x03, 0x36,
        0x08, 0x24, 0x12, 0x30, 0x18, 0x0c, 0x06, 0x03,
        0x0c, 0x30, 0x18, 0x40, 0x20, 0x10, 0x08, 0x04,
        0x02, 0x3c, 0x1e, 0x50, 0x28, 0x14, 0x0a, 0x05
    };
    writeData(MusicLengthLookupTbl, MusicLengthLookupTbl_data, sizeof(MusicLengthLookupTbl_data));

    // EndOfCastleMusicEnvData
    //
    const uint8_t EndOfCastleMusicEnvData_data[] = {
        0x9b, 0x9a, 0x99, 0x98
    };
    writeData(EndOfCastleMusicEnvData, EndOfCastleMusicEnvData_data, sizeof(EndOfCastleMusicEnvData_data));

    // AreaMusicEnvData
    //
    const uint8_t AreaMusicEnvData_data[] = {
        0x98, 0x97, 0x96, 0x95, 0x95, 0x94, 0x94, 0x90
    };
    writeData(AreaMusicEnvData, AreaMusicEnvData_data, sizeof(AreaMusicEnvData_data));

    // WaterEventMusEnvData
    //
    const uint8_t WaterEventMusEnvData_data[] = {
        0x93, 0x94, 0x95, 0x95, 0x96, 0x96, 0x96, 0x96,
        0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96, 0x96,
        0x96, 0x96, 0x96, 0x96, 0x96, 0x95, 0x95, 0x95,
        0x95, 0x95, 0x95, 0x94, 0x94, 0x94, 0x94, 0x94,
        0x94, 0x93, 0x93, 0x93, 0x92, 0x92, 0x91, 0x90
    };
    writeData(WaterEventMusEnvData, WaterEventMusEnvData_data, sizeof(WaterEventMusEnvData_data));

    // BowserFlameEnvData
    //
    const uint8_t BowserFlameEnvData_data[] = {
        0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1d, 0x1e, 0x1f,
        0x1f, 0x1e, 0x1c, 0x1d, 0x1e, 0x1f, 0x1f, 0x1f,
        0x1f, 0x1e, 0x1e, 0x1d, 0x1d, 0x1c, 0x1a, 0x1a,
        0x19, 0x19, 0x18, 0x17, 0x17, 0x16, 0x16, 0x15
    };
    writeData(BowserFlameEnvData, BowserFlameEnvData_data, sizeof(BowserFlameEnvData_data));

    // BrickShatterEnvData
    //
    const uint8_t BrickShatterEnvData_data[] = {
        
    };
    writeData(BrickShatterEnvData, BrickShatterEnvData_data, sizeof(BrickShatterEnvData_data));

}

